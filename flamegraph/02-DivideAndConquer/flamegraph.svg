<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="357.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="357.00"> </text><svg id="frames" x="10" width="1180" total_samples="151462"><g><title>libsystem_malloc.dylib`_szone_free (1,925 samples, 1.27%)</title><rect x="0.0013%" y="197" width="1.2709%" height="15" fill="rgb(227,0,7)" fg:x="2" fg:w="1925"/><text x="0.2513%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_large (1,925 samples, 1.27%)</title><rect x="0.0013%" y="181" width="1.2709%" height="15" fill="rgb(217,0,24)" fg:x="2" fg:w="1925"/><text x="0.2513%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_plat (1,925 samples, 1.27%)</title><rect x="0.0013%" y="165" width="1.2709%" height="15" fill="rgb(221,193,54)" fg:x="2" fg:w="1925"/><text x="0.2513%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (1,925 samples, 1.27%)</title><rect x="0.0013%" y="149" width="1.2709%" height="15" fill="rgb(248,212,6)" fg:x="2" fg:w="1925"/><text x="0.2513%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (1,895 samples, 1.25%)</title><rect x="2.5247%" y="181" width="1.2511%" height="15" fill="rgb(208,68,35)" fg:x="3824" fg:w="1895"/><text x="2.7747%" y="191.50"></text></g><g><title>one_bill_row_challenge`&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (21,820 samples, 14.41%)</title><rect x="3.7759%" y="181" width="14.4063%" height="15" fill="rgb(232,128,0)" fg:x="5719" fg:w="21820"/><text x="4.0259%" y="191.50">one_bill_row_challenge..</text></g><g><title>one_bill_row_challenge`core::slice::memchr::memchr_aligned (18,902 samples, 12.48%)</title><rect x="5.7024%" y="165" width="12.4797%" height="15" fill="rgb(207,160,47)" fg:x="8637" fg:w="18902"/><text x="5.9524%" y="175.50">one_bill_row_challe..</text></g><g><title>one_bill_row_challenge`DYLD-STUB$$memcmp (333 samples, 0.22%)</title><rect x="18.1821%" y="181" width="0.2199%" height="15" fill="rgb(228,23,34)" fg:x="27539" fg:w="333"/><text x="18.4321%" y="191.50"></text></g><g><title>one_bill_row_challenge`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (25,971 samples, 17.15%)</title><rect x="1.2723%" y="197" width="17.1469%" height="15" fill="rgb(218,30,26)" fg:x="1927" fg:w="25971"/><text x="1.5223%" y="207.50">one_bill_row_challenge`&lt;all..</text></g><g><title>one_bill_row_challenge`core::slice::memchr::memchr_aligned (25 samples, 0.02%)</title><rect x="18.4026%" y="181" width="0.0165%" height="15" fill="rgb(220,122,19)" fg:x="27873" fg:w="25"/><text x="18.6526%" y="191.50"></text></g><g><title>one_bill_row_challenge`&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (661 samples, 0.44%)</title><rect x="18.4218%" y="197" width="0.4364%" height="15" fill="rgb(250,228,42)" fg:x="27902" fg:w="661"/><text x="18.6718%" y="207.50"></text></g><g><title>one_bill_row_challenge`&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read_to_end (2,970 samples, 1.96%)</title><rect x="18.8582%" y="181" width="1.9609%" height="15" fill="rgb(240,193,28)" fg:x="28563" fg:w="2970"/><text x="19.1082%" y="191.50">o..</text></g><g><title>one_bill_row_challenge`&lt;std::fs::File as std::io::Read&gt;::read_to_end (2,970 samples, 1.96%)</title><rect x="18.8582%" y="165" width="1.9609%" height="15" fill="rgb(216,20,37)" fg:x="28563" fg:w="2970"/><text x="19.1082%" y="175.50">o..</text></g><g><title>one_bill_row_challenge`&lt;&amp;std::fs::File as std::io::Read&gt;::read_to_end (2,970 samples, 1.96%)</title><rect x="18.8582%" y="149" width="1.9609%" height="15" fill="rgb(206,188,39)" fg:x="28563" fg:w="2970"/><text x="19.1082%" y="159.50">o..</text></g><g><title>libsystem_kernel.dylib`read (2,970 samples, 1.96%)</title><rect x="18.8582%" y="133" width="1.9609%" height="15" fill="rgb(217,207,13)" fg:x="28563" fg:w="2970"/><text x="19.1082%" y="143.50">l..</text></g><g><title>one_bill_row_challenge`&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read_to_string (11,534 samples, 7.62%)</title><rect x="18.8582%" y="197" width="7.6151%" height="15" fill="rgb(231,73,38)" fg:x="28563" fg:w="11534"/><text x="19.1082%" y="207.50">one_bill_r..</text></g><g><title>one_bill_row_challenge`core::str::converts::from_utf8 (8,564 samples, 5.65%)</title><rect x="20.8191%" y="181" width="5.6542%" height="15" fill="rgb(225,20,46)" fg:x="31533" fg:w="8564"/><text x="21.0691%" y="191.50">one_bil..</text></g><g><title>dyld`start (40,101 samples, 26.48%)</title><rect x="0.0000%" y="309" width="26.4759%" height="15" fill="rgb(210,31,41)" fg:x="0" fg:w="40101"/><text x="0.2500%" y="319.50">dyld`start</text></g><g><title>one_bill_row_challenge`main (40,101 samples, 26.48%)</title><rect x="0.0000%" y="293" width="26.4759%" height="15" fill="rgb(221,200,47)" fg:x="0" fg:w="40101"/><text x="0.2500%" y="303.50">one_bill_row_challenge`main</text></g><g><title>one_bill_row_challenge`std::rt::lang_start_internal (40,101 samples, 26.48%)</title><rect x="0.0000%" y="277" width="26.4759%" height="15" fill="rgb(226,26,5)" fg:x="0" fg:w="40101"/><text x="0.2500%" y="287.50">one_bill_row_challenge`std::rt::lang_start..</text></g><g><title>one_bill_row_challenge`std::panicking::try (40,101 samples, 26.48%)</title><rect x="0.0000%" y="261" width="26.4759%" height="15" fill="rgb(249,33,26)" fg:x="0" fg:w="40101"/><text x="0.2500%" y="271.50">one_bill_row_challenge`std::panicking::try</text></g><g><title>one_bill_row_challenge`std::rt::lang_start::_{{closure}} (40,101 samples, 26.48%)</title><rect x="0.0000%" y="245" width="26.4759%" height="15" fill="rgb(235,183,28)" fg:x="0" fg:w="40101"/><text x="0.2500%" y="255.50">one_bill_row_challenge`std::rt::lang_start..</text></g><g><title>one_bill_row_challenge`std::sys_common::backtrace::__rust_begin_short_backtrace (40,101 samples, 26.48%)</title><rect x="0.0000%" y="229" width="26.4759%" height="15" fill="rgb(221,5,38)" fg:x="0" fg:w="40101"/><text x="0.2500%" y="239.50">one_bill_row_challenge`std::sys_common::ba..</text></g><g><title>one_bill_row_challenge`one_bill_row_challenge::main (40,100 samples, 26.48%)</title><rect x="0.0007%" y="213" width="26.4753%" height="15" fill="rgb(247,18,42)" fg:x="1" fg:w="40100"/><text x="0.2507%" y="223.50">one_bill_row_challenge`one_bill_row_challe..</text></g><g><title>libsystem_kernel.dylib`__exit (26 samples, 0.02%)</title><rect x="26.4759%" y="309" width="0.0172%" height="15" fill="rgb(241,131,45)" fg:x="40101" fg:w="26"/><text x="26.7259%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`read (341 samples, 0.23%)</title><rect x="26.4931%" y="309" width="0.2251%" height="15" fill="rgb(249,31,29)" fg:x="40127" fg:w="341"/><text x="26.7431%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_free (1,218 samples, 0.80%)</title><rect x="26.7196%" y="149" width="0.8042%" height="15" fill="rgb(225,111,53)" fg:x="40470" fg:w="1218"/><text x="26.9696%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1,217 samples, 0.80%)</title><rect x="27.5237%" y="149" width="0.8035%" height="15" fill="rgb(238,160,17)" fg:x="41688" fg:w="1217"/><text x="27.7737%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (309 samples, 0.20%)</title><rect x="28.3272%" y="149" width="0.2040%" height="15" fill="rgb(214,148,48)" fg:x="42905" fg:w="309"/><text x="28.5772%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (21 samples, 0.01%)</title><rect x="28.5312%" y="149" width="0.0139%" height="15" fill="rgb(232,36,49)" fg:x="43214" fg:w="21"/><text x="28.7812%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc (41 samples, 0.03%)</title><rect x="28.5451%" y="149" width="0.0271%" height="15" fill="rgb(209,103,24)" fg:x="43235" fg:w="41"/><text x="28.7951%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1,645 samples, 1.09%)</title><rect x="28.5722%" y="149" width="1.0861%" height="15" fill="rgb(229,88,8)" fg:x="43276" fg:w="1645"/><text x="28.8222%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1,659 samples, 1.10%)</title><rect x="29.6602%" y="149" width="1.0953%" height="15" fill="rgb(213,181,19)" fg:x="44924" fg:w="1659"/><text x="29.9102%" y="159.50"></text></g><g><title>one_bill_row_challenge`DYLD-STUB$$free (415 samples, 0.27%)</title><rect x="30.7556%" y="149" width="0.2740%" height="15" fill="rgb(254,191,54)" fg:x="46583" fg:w="415"/><text x="31.0056%" y="159.50"></text></g><g><title>one_bill_row_challenge`DYLD-STUB$$malloc (202 samples, 0.13%)</title><rect x="31.0296%" y="149" width="0.1334%" height="15" fill="rgb(241,83,37)" fg:x="46998" fg:w="202"/><text x="31.2796%" y="159.50"></text></g><g><title>one_bill_row_challenge`DYLD-STUB$$memcpy (47 samples, 0.03%)</title><rect x="31.1629%" y="149" width="0.0310%" height="15" fill="rgb(233,36,39)" fg:x="47200" fg:w="47"/><text x="31.4129%" y="159.50"></text></g><g><title>one_bill_row_challenge`__rdl_alloc (146 samples, 0.10%)</title><rect x="31.1940%" y="149" width="0.0964%" height="15" fill="rgb(226,3,54)" fg:x="47247" fg:w="146"/><text x="31.4440%" y="159.50"></text></g><g><title>one_bill_row_challenge`core::num::dec2flt::_&lt;impl core::str::traits::FromStr for f64&gt;::from_str (1,224 samples, 0.81%)</title><rect x="31.3049%" y="149" width="0.8081%" height="15" fill="rgb(245,192,40)" fg:x="47415" fg:w="1224"/><text x="31.5549%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (31 samples, 0.02%)</title><rect x="38.4598%" y="133" width="0.0205%" height="15" fill="rgb(238,167,29)" fg:x="58252" fg:w="31"/><text x="38.7098%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2,591 samples, 1.71%)</title><rect x="38.4803%" y="133" width="1.7107%" height="15" fill="rgb(232,182,51)" fg:x="58283" fg:w="2591"/><text x="38.7303%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (1,213 samples, 0.80%)</title><rect x="40.1982%" y="133" width="0.8009%" height="15" fill="rgb(231,60,39)" fg:x="60885" fg:w="1213"/><text x="40.4482%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (20 samples, 0.01%)</title><rect x="40.9991%" y="133" width="0.0132%" height="15" fill="rgb(208,69,12)" fg:x="62098" fg:w="20"/><text x="41.2491%" y="143.50"></text></g><g><title>one_bill_row_challenge`DYLD-STUB$$memcmp (156 samples, 0.10%)</title><rect x="41.0123%" y="133" width="0.1030%" height="15" fill="rgb(235,93,37)" fg:x="62118" fg:w="156"/><text x="41.2623%" y="143.50"></text></g><g><title>one_bill_row_challenge`core::num::dec2flt::_&lt;impl core::str::traits::FromStr for f64&gt;::from_str (4,446 samples, 2.94%)</title><rect x="41.1245%" y="133" width="2.9354%" height="15" fill="rgb(213,116,39)" fg:x="62288" fg:w="4446"/><text x="41.3745%" y="143.50">on..</text></g><g><title>one_bill_row_challenge`core::num::dec2flt::parse::parse_number (2,240 samples, 1.48%)</title><rect x="42.5810%" y="117" width="1.4789%" height="15" fill="rgb(222,207,29)" fg:x="64494" fg:w="2240"/><text x="42.8310%" y="127.50"></text></g><g><title>one_bill_row_challenge`core::num::dec2flt::parse::parse_number (218 samples, 0.14%)</title><rect x="44.0599%" y="133" width="0.1439%" height="15" fill="rgb(206,96,30)" fg:x="66734" fg:w="218"/><text x="44.3099%" y="143.50"></text></g><g><title>one_bill_row_challenge`core::slice::memchr::memchr_aligned (3,699 samples, 2.44%)</title><rect x="44.2038%" y="133" width="2.4422%" height="15" fill="rgb(218,138,4)" fg:x="66952" fg:w="3699"/><text x="44.4538%" y="143.50">on..</text></g><g><title>one_bill_row_challenge`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2,436 samples, 1.61%)</title><rect x="48.1058%" y="117" width="1.6083%" height="15" fill="rgb(250,191,14)" fg:x="72862" fg:w="2436"/><text x="48.3558%" y="127.50"></text></g><g><title>one_bill_row_challenge`core::hash::BuildHasher::hash_one (1,930 samples, 1.27%)</title><rect x="49.7141%" y="117" width="1.2742%" height="15" fill="rgb(239,60,40)" fg:x="75298" fg:w="1930"/><text x="49.9641%" y="127.50"></text></g><g><title>one_bill_row_challenge`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (28,590 samples, 18.88%)</title><rect x="32.1130%" y="149" width="18.8760%" height="15" fill="rgb(206,27,48)" fg:x="48639" fg:w="28590"/><text x="32.3630%" y="159.50">one_bill_row_challenge`core::..</text></g><g><title>one_bill_row_challenge`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (6,578 samples, 4.34%)</title><rect x="46.6460%" y="133" width="4.3430%" height="15" fill="rgb(225,35,8)" fg:x="70651" fg:w="6578"/><text x="46.8960%" y="143.50">one_b..</text></g><g><title>one_bill_row_challenge`core::str::_&lt;impl str&gt;::trim_matches (6,649 samples, 4.39%)</title><rect x="50.9936%" y="149" width="4.3899%" height="15" fill="rgb(250,213,24)" fg:x="77236" fg:w="6649"/><text x="51.2436%" y="159.50">one_b..</text></g><g><title>one_bill_row_challenge`rayon::iter::plumbing::Folder::consume_iter (43,753 samples, 28.89%)</title><rect x="26.7196%" y="165" width="28.8871%" height="15" fill="rgb(247,123,22)" fg:x="40470" fg:w="43753"/><text x="26.9696%" y="175.50">one_bill_row_challenge`rayon::iter::plumbing::..</text></g><g><title>one_bill_row_challenge`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (338 samples, 0.22%)</title><rect x="55.3835%" y="149" width="0.2232%" height="15" fill="rgb(231,138,38)" fg:x="83885" fg:w="338"/><text x="55.6335%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_free (1,223 samples, 0.81%)</title><rect x="55.6067%" y="117" width="0.8075%" height="15" fill="rgb(231,145,46)" fg:x="84223" fg:w="1223"/><text x="55.8567%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1,213 samples, 0.80%)</title><rect x="56.4142%" y="117" width="0.8009%" height="15" fill="rgb(251,118,11)" fg:x="85446" fg:w="1213"/><text x="56.6642%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (292 samples, 0.19%)</title><rect x="57.2150%" y="117" width="0.1928%" height="15" fill="rgb(217,147,25)" fg:x="86659" fg:w="292"/><text x="57.4650%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc (31 samples, 0.02%)</title><rect x="57.4144%" y="117" width="0.0205%" height="15" fill="rgb(247,81,37)" fg:x="86961" fg:w="31"/><text x="57.6644%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1,653 samples, 1.09%)</title><rect x="57.4349%" y="117" width="1.0914%" height="15" fill="rgb(209,12,38)" fg:x="86992" fg:w="1653"/><text x="57.6849%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1,615 samples, 1.07%)</title><rect x="58.5262%" y="117" width="1.0663%" height="15" fill="rgb(227,1,9)" fg:x="88645" fg:w="1615"/><text x="58.7762%" y="127.50"></text></g><g><title>one_bill_row_challenge`DYLD-STUB$$free (416 samples, 0.27%)</title><rect x="59.5925%" y="117" width="0.2747%" height="15" fill="rgb(248,47,43)" fg:x="90260" fg:w="416"/><text x="59.8425%" y="127.50"></text></g><g><title>one_bill_row_challenge`DYLD-STUB$$malloc (191 samples, 0.13%)</title><rect x="59.8672%" y="117" width="0.1261%" height="15" fill="rgb(221,10,30)" fg:x="90676" fg:w="191"/><text x="60.1172%" y="127.50"></text></g><g><title>one_bill_row_challenge`DYLD-STUB$$memcpy (47 samples, 0.03%)</title><rect x="59.9933%" y="117" width="0.0310%" height="15" fill="rgb(210,229,1)" fg:x="90867" fg:w="47"/><text x="60.2433%" y="127.50"></text></g><g><title>one_bill_row_challenge`__rdl_alloc (159 samples, 0.10%)</title><rect x="60.0243%" y="117" width="0.1050%" height="15" fill="rgb(222,148,37)" fg:x="90914" fg:w="159"/><text x="60.2743%" y="127.50"></text></g><g><title>one_bill_row_challenge`core::num::dec2flt::_&lt;impl core::str::traits::FromStr for f64&gt;::from_str (1,295 samples, 0.85%)</title><rect x="60.1392%" y="117" width="0.8550%" height="15" fill="rgb(234,67,33)" fg:x="91088" fg:w="1295"/><text x="60.3892%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (27 samples, 0.02%)</title><rect x="67.4638%" y="101" width="0.0178%" height="15" fill="rgb(247,98,35)" fg:x="102182" fg:w="27"/><text x="67.7138%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2,649 samples, 1.75%)</title><rect x="67.4816%" y="101" width="1.7490%" height="15" fill="rgb(247,138,52)" fg:x="102209" fg:w="2649"/><text x="67.7316%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (1,191 samples, 0.79%)</title><rect x="69.2372%" y="101" width="0.7863%" height="15" fill="rgb(213,79,30)" fg:x="104868" fg:w="1191"/><text x="69.4872%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (21 samples, 0.01%)</title><rect x="70.0235%" y="101" width="0.0139%" height="15" fill="rgb(246,177,23)" fg:x="106059" fg:w="21"/><text x="70.2735%" y="111.50"></text></g><g><title>one_bill_row_challenge`DYLD-STUB$$memcmp (162 samples, 0.11%)</title><rect x="70.0374%" y="101" width="0.1070%" height="15" fill="rgb(230,62,27)" fg:x="106080" fg:w="162"/><text x="70.2874%" y="111.50"></text></g><g><title>one_bill_row_challenge`core::hash::BuildHasher::hash_one (16 samples, 0.01%)</title><rect x="70.1443%" y="101" width="0.0106%" height="15" fill="rgb(216,154,8)" fg:x="106242" fg:w="16"/><text x="70.3943%" y="111.50"></text></g><g><title>one_bill_row_challenge`core::num::dec2flt::_&lt;impl core::str::traits::FromStr for f64&gt;::from_str (4,466 samples, 2.95%)</title><rect x="70.1549%" y="101" width="2.9486%" height="15" fill="rgb(244,35,45)" fg:x="106258" fg:w="4466"/><text x="70.4049%" y="111.50">on..</text></g><g><title>one_bill_row_challenge`core::num::dec2flt::parse::parse_number (2,250 samples, 1.49%)</title><rect x="71.6180%" y="85" width="1.4855%" height="15" fill="rgb(251,115,12)" fg:x="108474" fg:w="2250"/><text x="71.8680%" y="95.50"></text></g><g><title>one_bill_row_challenge`core::num::dec2flt::parse::parse_number (214 samples, 0.14%)</title><rect x="73.1035%" y="101" width="0.1413%" height="15" fill="rgb(240,54,50)" fg:x="110724" fg:w="214"/><text x="73.3535%" y="111.50"></text></g><g><title>one_bill_row_challenge`core::slice::memchr::memchr_aligned (3,686 samples, 2.43%)</title><rect x="73.2448%" y="101" width="2.4336%" height="15" fill="rgb(233,84,52)" fg:x="110938" fg:w="3686"/><text x="73.4948%" y="111.50">on..</text></g><g><title>one_bill_row_challenge`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2,409 samples, 1.59%)</title><rect x="77.1500%" y="85" width="1.5905%" height="15" fill="rgb(207,117,47)" fg:x="116853" fg:w="2409"/><text x="77.4000%" y="95.50"></text></g><g><title>one_bill_row_challenge`core::hash::BuildHasher::hash_one (1,932 samples, 1.28%)</title><rect x="78.7405%" y="85" width="1.2756%" height="15" fill="rgb(249,43,39)" fg:x="119262" fg:w="1932"/><text x="78.9905%" y="95.50"></text></g><g><title>one_bill_row_challenge`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (28,815 samples, 19.02%)</title><rect x="60.9942%" y="117" width="19.0246%" height="15" fill="rgb(209,38,44)" fg:x="92383" fg:w="28815"/><text x="61.2442%" y="127.50">one_bill_row_challenge`core::o..</text></g><g><title>one_bill_row_challenge`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (6,574 samples, 4.34%)</title><rect x="75.6784%" y="101" width="4.3404%" height="15" fill="rgb(236,212,23)" fg:x="114624" fg:w="6574"/><text x="75.9284%" y="111.50">one_b..</text></g><g><title>one_bill_row_challenge`core::str::_&lt;impl str&gt;::trim_matches (6,885 samples, 4.55%)</title><rect x="80.0227%" y="117" width="4.5457%" height="15" fill="rgb(242,79,21)" fg:x="121204" fg:w="6885"/><text x="80.2727%" y="127.50">one_b..</text></g><g><title>one_bill_row_challenge`rayon::iter::plumbing::Folder::consume_iter (44,200 samples, 29.18%)</title><rect x="55.6067%" y="133" width="29.1822%" height="15" fill="rgb(211,96,35)" fg:x="84223" fg:w="44200"/><text x="55.8567%" y="143.50">one_bill_row_challenge`rayon::iter::plumbing::F..</text></g><g><title>one_bill_row_challenge`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (334 samples, 0.22%)</title><rect x="84.5684%" y="117" width="0.2205%" height="15" fill="rgb(253,215,40)" fg:x="128089" fg:w="334"/><text x="84.8184%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_free (299 samples, 0.20%)</title><rect x="84.7889%" y="85" width="0.1974%" height="15" fill="rgb(211,81,21)" fg:x="128423" fg:w="299"/><text x="85.0389%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (300 samples, 0.20%)</title><rect x="84.9863%" y="85" width="0.1981%" height="15" fill="rgb(208,190,38)" fg:x="128722" fg:w="300"/><text x="85.2363%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (75 samples, 0.05%)</title><rect x="85.1844%" y="85" width="0.0495%" height="15" fill="rgb(235,213,38)" fg:x="129022" fg:w="75"/><text x="85.4344%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (415 samples, 0.27%)</title><rect x="85.2445%" y="85" width="0.2740%" height="15" fill="rgb(237,122,38)" fg:x="129113" fg:w="415"/><text x="85.4945%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (354 samples, 0.23%)</title><rect x="85.5185%" y="85" width="0.2337%" height="15" fill="rgb(244,218,35)" fg:x="129528" fg:w="354"/><text x="85.7685%" y="95.50"></text></g><g><title>one_bill_row_challenge`DYLD-STUB$$free (90 samples, 0.06%)</title><rect x="85.7522%" y="85" width="0.0594%" height="15" fill="rgb(240,68,47)" fg:x="129882" fg:w="90"/><text x="86.0022%" y="95.50"></text></g><g><title>one_bill_row_challenge`DYLD-STUB$$malloc (52 samples, 0.03%)</title><rect x="85.8116%" y="85" width="0.0343%" height="15" fill="rgb(210,16,53)" fg:x="129972" fg:w="52"/><text x="86.0616%" y="95.50"></text></g><g><title>one_bill_row_challenge`DYLD-STUB$$memcpy (16 samples, 0.01%)</title><rect x="85.8460%" y="85" width="0.0106%" height="15" fill="rgb(235,124,12)" fg:x="130024" fg:w="16"/><text x="86.0960%" y="95.50"></text></g><g><title>one_bill_row_challenge`__rdl_alloc (54 samples, 0.04%)</title><rect x="85.8565%" y="85" width="0.0357%" height="15" fill="rgb(224,169,11)" fg:x="130040" fg:w="54"/><text x="86.1065%" y="95.50"></text></g><g><title>one_bill_row_challenge`core::num::dec2flt::_&lt;impl core::str::traits::FromStr for f64&gt;::from_str (300 samples, 0.20%)</title><rect x="85.8968%" y="85" width="0.1981%" height="15" fill="rgb(250,166,2)" fg:x="130101" fg:w="300"/><text x="86.1468%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (651 samples, 0.43%)</title><rect x="87.5896%" y="69" width="0.4298%" height="15" fill="rgb(242,216,29)" fg:x="132665" fg:w="651"/><text x="87.8396%" y="79.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (290 samples, 0.19%)</title><rect x="88.0227%" y="69" width="0.1915%" height="15" fill="rgb(230,116,27)" fg:x="133321" fg:w="290"/><text x="88.2727%" y="79.50"></text></g><g><title>one_bill_row_challenge`DYLD-STUB$$memcmp (47 samples, 0.03%)</title><rect x="88.2188%" y="69" width="0.0310%" height="15" fill="rgb(228,99,48)" fg:x="133618" fg:w="47"/><text x="88.4688%" y="79.50"></text></g><g><title>one_bill_row_challenge`core::num::dec2flt::_&lt;impl core::str::traits::FromStr for f64&gt;::from_str (1,079 samples, 0.71%)</title><rect x="88.2538%" y="69" width="0.7124%" height="15" fill="rgb(253,11,6)" fg:x="133671" fg:w="1079"/><text x="88.5038%" y="79.50"></text></g><g><title>one_bill_row_challenge`core::num::dec2flt::parse::parse_number (529 samples, 0.35%)</title><rect x="88.6169%" y="53" width="0.3493%" height="15" fill="rgb(247,143,39)" fg:x="134221" fg:w="529"/><text x="88.8669%" y="63.50"></text></g><g><title>one_bill_row_challenge`core::num::dec2flt::parse::parse_number (60 samples, 0.04%)</title><rect x="88.9662%" y="69" width="0.0396%" height="15" fill="rgb(236,97,10)" fg:x="134750" fg:w="60"/><text x="89.2162%" y="79.50"></text></g><g><title>one_bill_row_challenge`core::slice::memchr::memchr_aligned (872 samples, 0.58%)</title><rect x="89.0058%" y="69" width="0.5757%" height="15" fill="rgb(233,208,19)" fg:x="134810" fg:w="872"/><text x="89.2558%" y="79.50"></text></g><g><title>one_bill_row_challenge`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (590 samples, 0.39%)</title><rect x="89.9420%" y="53" width="0.3895%" height="15" fill="rgb(216,164,2)" fg:x="136228" fg:w="590"/><text x="90.1920%" y="63.50"></text></g><g><title>one_bill_row_challenge`core::hash::BuildHasher::hash_one (465 samples, 0.31%)</title><rect x="90.3316%" y="53" width="0.3070%" height="15" fill="rgb(220,129,5)" fg:x="136818" fg:w="465"/><text x="90.5816%" y="63.50"></text></g><g><title>one_bill_row_challenge`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (6,883 samples, 4.54%)</title><rect x="86.0949%" y="85" width="4.5444%" height="15" fill="rgb(242,17,10)" fg:x="130401" fg:w="6883"/><text x="86.3449%" y="95.50">one_b..</text></g><g><title>one_bill_row_challenge`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1,602 samples, 1.06%)</title><rect x="89.5815%" y="69" width="1.0577%" height="15" fill="rgb(242,107,0)" fg:x="135682" fg:w="1602"/><text x="89.8315%" y="79.50"></text></g><g><title>one_bill_row_challenge`core::str::_&lt;impl str&gt;::trim_matches (1,612 samples, 1.06%)</title><rect x="90.6406%" y="85" width="1.0643%" height="15" fill="rgb(251,28,31)" fg:x="137286" fg:w="1612"/><text x="90.8906%" y="95.50"></text></g><g><title>one_bill_row_challenge`rayon::iter::plumbing::bridge_producer_consumer::helper (98,527 samples, 65.05%)</title><rect x="26.7196%" y="181" width="65.0506%" height="15" fill="rgb(233,223,10)" fg:x="40470" fg:w="98527"/><text x="26.9696%" y="191.50">one_bill_row_challenge`rayon::iter::plumbing::bridge_producer_consumer::helper</text></g><g><title>one_bill_row_challenge`rayon_core::join::join_context::_{{closure}} (54,774 samples, 36.16%)</title><rect x="55.6067%" y="165" width="36.1635%" height="15" fill="rgb(215,21,27)" fg:x="84223" fg:w="54774"/><text x="55.8567%" y="175.50">one_bill_row_challenge`rayon_core::join::join_context::_{{c..</text></g><g><title>one_bill_row_challenge`rayon::iter::plumbing::bridge_producer_consumer::helper (54,774 samples, 36.16%)</title><rect x="55.6067%" y="149" width="36.1635%" height="15" fill="rgb(232,23,21)" fg:x="84223" fg:w="54774"/><text x="55.8567%" y="159.50">one_bill_row_challenge`rayon::iter::plumbing::bridge_produc..</text></g><g><title>one_bill_row_challenge`rayon_core::join::join_context::_{{closure}} (10,574 samples, 6.98%)</title><rect x="84.7889%" y="133" width="6.9813%" height="15" fill="rgb(244,5,23)" fg:x="128423" fg:w="10574"/><text x="85.0389%" y="143.50">one_bill_..</text></g><g><title>one_bill_row_challenge`rayon::iter::plumbing::bridge_producer_consumer::helper (10,574 samples, 6.98%)</title><rect x="84.7889%" y="117" width="6.9813%" height="15" fill="rgb(226,81,46)" fg:x="128423" fg:w="10574"/><text x="85.0389%" y="127.50">one_bill_..</text></g><g><title>one_bill_row_challenge`rayon::iter::plumbing::Folder::consume_iter (10,574 samples, 6.98%)</title><rect x="84.7889%" y="101" width="6.9813%" height="15" fill="rgb(247,70,30)" fg:x="128423" fg:w="10574"/><text x="85.0389%" y="111.50">one_bill_..</text></g><g><title>one_bill_row_challenge`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (99 samples, 0.07%)</title><rect x="91.7049%" y="85" width="0.0654%" height="15" fill="rgb(212,68,19)" fg:x="138898" fg:w="99"/><text x="91.9549%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_free (285 samples, 0.19%)</title><rect x="91.7742%" y="69" width="0.1882%" height="15" fill="rgb(240,187,13)" fg:x="139003" fg:w="285"/><text x="92.0242%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (291 samples, 0.19%)</title><rect x="91.9623%" y="69" width="0.1921%" height="15" fill="rgb(223,113,26)" fg:x="139288" fg:w="291"/><text x="92.2123%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (49 samples, 0.03%)</title><rect x="92.1545%" y="69" width="0.0324%" height="15" fill="rgb(206,192,2)" fg:x="139579" fg:w="49"/><text x="92.4045%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (431 samples, 0.28%)</title><rect x="92.1914%" y="69" width="0.2846%" height="15" fill="rgb(241,108,4)" fg:x="139635" fg:w="431"/><text x="92.4414%" y="79.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (484 samples, 0.32%)</title><rect x="92.4767%" y="69" width="0.3196%" height="15" fill="rgb(247,173,49)" fg:x="140067" fg:w="484"/><text x="92.7267%" y="79.50"></text></g><g><title>one_bill_row_challenge`DYLD-STUB$$free (111 samples, 0.07%)</title><rect x="92.7962%" y="69" width="0.0733%" height="15" fill="rgb(224,114,35)" fg:x="140551" fg:w="111"/><text x="93.0462%" y="79.50"></text></g><g><title>one_bill_row_challenge`DYLD-STUB$$malloc (35 samples, 0.02%)</title><rect x="92.8695%" y="69" width="0.0231%" height="15" fill="rgb(245,159,27)" fg:x="140662" fg:w="35"/><text x="93.1195%" y="79.50"></text></g><g><title>one_bill_row_challenge`__rdl_alloc (42 samples, 0.03%)</title><rect x="92.8992%" y="69" width="0.0277%" height="15" fill="rgb(245,172,44)" fg:x="140707" fg:w="42"/><text x="93.1492%" y="79.50"></text></g><g><title>one_bill_row_challenge`core::num::dec2flt::_&lt;impl core::str::traits::FromStr for f64&gt;::from_str (364 samples, 0.24%)</title><rect x="92.9276%" y="69" width="0.2403%" height="15" fill="rgb(236,23,11)" fg:x="140750" fg:w="364"/><text x="93.1776%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (713 samples, 0.47%)</title><rect x="95.0324%" y="53" width="0.4707%" height="15" fill="rgb(205,117,38)" fg:x="143938" fg:w="713"/><text x="95.2824%" y="63.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (299 samples, 0.20%)</title><rect x="95.5045%" y="53" width="0.1974%" height="15" fill="rgb(237,72,25)" fg:x="144653" fg:w="299"/><text x="95.7545%" y="63.50"></text></g><g><title>one_bill_row_challenge`DYLD-STUB$$memcmp (42 samples, 0.03%)</title><rect x="95.7026%" y="53" width="0.0277%" height="15" fill="rgb(244,70,9)" fg:x="144953" fg:w="42"/><text x="95.9526%" y="63.50"></text></g><g><title>one_bill_row_challenge`core::num::dec2flt::_&lt;impl core::str::traits::FromStr for f64&gt;::from_str (1,097 samples, 0.72%)</title><rect x="95.7362%" y="53" width="0.7243%" height="15" fill="rgb(217,125,39)" fg:x="145004" fg:w="1097"/><text x="95.9862%" y="63.50"></text></g><g><title>one_bill_row_challenge`core::num::dec2flt::parse::parse_number (534 samples, 0.35%)</title><rect x="96.1079%" y="37" width="0.3526%" height="15" fill="rgb(235,36,10)" fg:x="145567" fg:w="534"/><text x="96.3579%" y="47.50"></text></g><g><title>one_bill_row_challenge`core::num::dec2flt::parse::parse_number (71 samples, 0.05%)</title><rect x="96.4605%" y="53" width="0.0469%" height="15" fill="rgb(251,123,47)" fg:x="146101" fg:w="71"/><text x="96.7105%" y="63.50"></text></g><g><title>one_bill_row_challenge`core::slice::memchr::memchr_aligned (1,091 samples, 0.72%)</title><rect x="96.5074%" y="53" width="0.7203%" height="15" fill="rgb(221,13,13)" fg:x="146172" fg:w="1091"/><text x="96.7574%" y="63.50"></text></g><g><title>one_bill_row_challenge`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (685 samples, 0.45%)</title><rect x="97.5089%" y="37" width="0.4523%" height="15" fill="rgb(238,131,9)" fg:x="147689" fg:w="685"/><text x="97.7589%" y="47.50"></text></g><g><title>one_bill_row_challenge`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (7,727 samples, 5.10%)</title><rect x="93.1679%" y="69" width="5.1016%" height="15" fill="rgb(211,50,8)" fg:x="141114" fg:w="7727"/><text x="93.4179%" y="79.50">one_bi..</text></g><g><title>one_bill_row_challenge`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1,578 samples, 1.04%)</title><rect x="97.2277%" y="53" width="1.0418%" height="15" fill="rgb(245,182,24)" fg:x="147263" fg:w="1578"/><text x="97.4777%" y="63.50"></text></g><g><title>one_bill_row_challenge`core::hash::BuildHasher::hash_one (467 samples, 0.31%)</title><rect x="97.9612%" y="37" width="0.3083%" height="15" fill="rgb(242,14,37)" fg:x="148374" fg:w="467"/><text x="98.2112%" y="47.50"></text></g><g><title>one_bill_row_challenge`core::str::_&lt;impl str&gt;::trim_matches (2,055 samples, 1.36%)</title><rect x="98.2695%" y="69" width="1.3568%" height="15" fill="rgb(246,228,12)" fg:x="148841" fg:w="2055"/><text x="98.5195%" y="79.50"></text></g><g><title>one_bill_row_challenge`rayon::iter::plumbing::bridge_producer_consumer::helper (11,990 samples, 7.92%)</title><rect x="91.7742%" y="165" width="7.9162%" height="15" fill="rgb(213,55,15)" fg:x="139003" fg:w="11990"/><text x="92.0242%" y="175.50">one_bill_ro..</text></g><g><title>one_bill_row_challenge`rayon_core::join::join_context::_{{closure}} (11,990 samples, 7.92%)</title><rect x="91.7742%" y="149" width="7.9162%" height="15" fill="rgb(209,9,3)" fg:x="139003" fg:w="11990"/><text x="92.0242%" y="159.50">one_bill_ro..</text></g><g><title>one_bill_row_challenge`rayon::iter::plumbing::bridge_producer_consumer::helper (11,990 samples, 7.92%)</title><rect x="91.7742%" y="133" width="7.9162%" height="15" fill="rgb(230,59,30)" fg:x="139003" fg:w="11990"/><text x="92.0242%" y="143.50">one_bill_ro..</text></g><g><title>one_bill_row_challenge`rayon_core::join::join_context::_{{closure}} (11,990 samples, 7.92%)</title><rect x="91.7742%" y="117" width="7.9162%" height="15" fill="rgb(209,121,21)" fg:x="139003" fg:w="11990"/><text x="92.0242%" y="127.50">one_bill_ro..</text></g><g><title>one_bill_row_challenge`rayon::iter::plumbing::bridge_producer_consumer::helper (11,990 samples, 7.92%)</title><rect x="91.7742%" y="101" width="7.9162%" height="15" fill="rgb(220,109,13)" fg:x="139003" fg:w="11990"/><text x="92.0242%" y="111.50">one_bill_ro..</text></g><g><title>one_bill_row_challenge`rayon::iter::plumbing::Folder::consume_iter (11,990 samples, 7.92%)</title><rect x="91.7742%" y="85" width="7.9162%" height="15" fill="rgb(232,18,1)" fg:x="139003" fg:w="11990"/><text x="92.0242%" y="95.50">one_bill_ro..</text></g><g><title>one_bill_row_challenge`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (97 samples, 0.06%)</title><rect x="99.6263%" y="69" width="0.0640%" height="15" fill="rgb(215,41,42)" fg:x="150896" fg:w="97"/><text x="99.8763%" y="79.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (110,526 samples, 72.97%)</title><rect x="26.7183%" y="309" width="72.9728%" height="15" fill="rgb(224,123,36)" fg:x="40468" fg:w="110526"/><text x="26.9683%" y="319.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (110,526 samples, 72.97%)</title><rect x="26.7183%" y="293" width="72.9728%" height="15" fill="rgb(240,125,3)" fg:x="40468" fg:w="110526"/><text x="26.9683%" y="303.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>one_bill_row_challenge`std::sys::pal::unix::thread::Thread::new::thread_start (110,526 samples, 72.97%)</title><rect x="26.7183%" y="277" width="72.9728%" height="15" fill="rgb(205,98,50)" fg:x="40468" fg:w="110526"/><text x="26.9683%" y="287.50">one_bill_row_challenge`std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>one_bill_row_challenge`core::ops::function::FnOnce::call_once{{vtable.shim}} (110,526 samples, 72.97%)</title><rect x="26.7183%" y="261" width="72.9728%" height="15" fill="rgb(205,185,37)" fg:x="40468" fg:w="110526"/><text x="26.9683%" y="271.50">one_bill_row_challenge`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>one_bill_row_challenge`std::sys_common::backtrace::__rust_begin_short_backtrace (110,526 samples, 72.97%)</title><rect x="26.7183%" y="245" width="72.9728%" height="15" fill="rgb(238,207,15)" fg:x="40468" fg:w="110526"/><text x="26.9683%" y="255.50">one_bill_row_challenge`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>one_bill_row_challenge`rayon_core::registry::ThreadBuilder::run (110,526 samples, 72.97%)</title><rect x="26.7183%" y="229" width="72.9728%" height="15" fill="rgb(213,199,42)" fg:x="40468" fg:w="110526"/><text x="26.9683%" y="239.50">one_bill_row_challenge`rayon_core::registry::ThreadBuilder::run</text></g><g><title>one_bill_row_challenge`rayon_core::registry::WorkerThread::wait_until_cold (110,526 samples, 72.97%)</title><rect x="26.7183%" y="213" width="72.9728%" height="15" fill="rgb(235,201,11)" fg:x="40468" fg:w="110526"/><text x="26.9683%" y="223.50">one_bill_row_challenge`rayon_core::registry::WorkerThread::wait_until_cold</text></g><g><title>one_bill_row_challenge`&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (110,524 samples, 72.97%)</title><rect x="26.7196%" y="197" width="72.9714%" height="15" fill="rgb(207,46,11)" fg:x="40470" fg:w="110524"/><text x="26.9696%" y="207.50">one_bill_row_challenge`&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute</text></g><g><title>one_bill_row_challenge`rayon_core::join::join_context::_{{closure}} (11,991 samples, 7.92%)</title><rect x="91.7742%" y="181" width="7.9168%" height="15" fill="rgb(241,35,35)" fg:x="139003" fg:w="11991"/><text x="92.0242%" y="191.50">one_bill_ro..</text></g><g><title>all (151,462 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(243,32,47)" fg:x="0" fg:w="151462"/><text x="0.2500%" y="335.50"></text></g><g><title>one_bill_row_challenge`core::str::converts::from_utf8 (468 samples, 0.31%)</title><rect x="99.6910%" y="309" width="0.3090%" height="15" fill="rgb(247,202,23)" fg:x="150994" fg:w="468"/><text x="99.9410%" y="319.50"></text></g></svg></svg>