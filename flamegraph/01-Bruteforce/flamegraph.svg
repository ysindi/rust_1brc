<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="293.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="293.00"> </text><svg id="frames" x="10" width="1180" total_samples="130861"><g><title>libsystem_malloc.dylib`_free (5,809 samples, 4.44%)</title><rect x="0.0000%" y="149" width="4.4391%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="5809"/><text x="0.2500%" y="159.50">libsy..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2,822 samples, 2.16%)</title><rect x="4.4391%" y="149" width="2.1565%" height="15" fill="rgb(217,0,24)" fg:x="5809" fg:w="2822"/><text x="4.6891%" y="159.50">l..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1,211 samples, 0.93%)</title><rect x="6.5955%" y="149" width="0.9254%" height="15" fill="rgb(221,193,54)" fg:x="8631" fg:w="1211"/><text x="6.8455%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3,220 samples, 2.46%)</title><rect x="7.5248%" y="149" width="2.4606%" height="15" fill="rgb(248,212,6)" fg:x="9847" fg:w="3220"/><text x="7.7748%" y="159.50">li..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (2,114 samples, 1.62%)</title><rect x="9.9862%" y="149" width="1.6155%" height="15" fill="rgb(208,68,35)" fg:x="13068" fg:w="2114"/><text x="10.2362%" y="159.50"></text></g><g><title>one_bill_row_challenge`&lt;std::io::Lines&lt;B&gt; as core::iter::traits::iterator::Iterator&gt;::next (225 samples, 0.17%)</title><rect x="11.6016%" y="149" width="0.1719%" height="15" fill="rgb(232,128,0)" fg:x="15182" fg:w="225"/><text x="11.8516%" y="159.50"></text></g><g><title>one_bill_row_challenge`DYLD-STUB$$free (1,664 samples, 1.27%)</title><rect x="11.7736%" y="149" width="1.2716%" height="15" fill="rgb(207,160,47)" fg:x="15407" fg:w="1664"/><text x="12.0236%" y="159.50"></text></g><g><title>one_bill_row_challenge`DYLD-STUB$$malloc (403 samples, 0.31%)</title><rect x="13.0451%" y="149" width="0.3080%" height="15" fill="rgb(228,23,34)" fg:x="17071" fg:w="403"/><text x="13.2951%" y="159.50"></text></g><g><title>one_bill_row_challenge`DYLD-STUB$$memcpy (238 samples, 0.18%)</title><rect x="13.3531%" y="149" width="0.1819%" height="15" fill="rgb(218,30,26)" fg:x="17474" fg:w="238"/><text x="13.6031%" y="159.50"></text></g><g><title>one_bill_row_challenge`__rdl_alloc (325 samples, 0.25%)</title><rect x="13.5350%" y="149" width="0.2484%" height="15" fill="rgb(220,122,19)" fg:x="17712" fg:w="325"/><text x="13.7850%" y="159.50"></text></g><g><title>one_bill_row_challenge`core::num::dec2flt::_&lt;impl core::str::traits::FromStr for f64&gt;::from_str (1,234 samples, 0.94%)</title><rect x="13.7856%" y="149" width="0.9430%" height="15" fill="rgb(250,228,42)" fg:x="18040" fg:w="1234"/><text x="14.0356%" y="159.50"></text></g><g><title>one_bill_row_challenge`core::slice::memchr::memchr_aligned (15 samples, 0.01%)</title><rect x="14.7286%" y="149" width="0.0115%" height="15" fill="rgb(240,193,28)" fg:x="19274" fg:w="15"/><text x="14.9786%" y="159.50"></text></g><g><title>one_bill_row_challenge`core::str::_&lt;impl str&gt;::trim_matches (6,863 samples, 5.24%)</title><rect x="14.7401%" y="149" width="5.2445%" height="15" fill="rgb(216,20,37)" fg:x="19289" fg:w="6863"/><text x="14.9901%" y="159.50">one_bi..</text></g><g><title>one_bill_row_challenge`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (688 samples, 0.53%)</title><rect x="19.9846%" y="149" width="0.5257%" height="15" fill="rgb(206,188,39)" fg:x="26152" fg:w="688"/><text x="20.2346%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (162 samples, 0.12%)</title><rect x="27.6576%" y="133" width="0.1238%" height="15" fill="rgb(217,207,13)" fg:x="36193" fg:w="162"/><text x="27.9076%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (8,334 samples, 6.37%)</title><rect x="27.7814%" y="133" width="6.3686%" height="15" fill="rgb(231,73,38)" fg:x="36355" fg:w="8334"/><text x="28.0314%" y="143.50">libsyste..</text></g><g><title>libsystem_platform.dylib`__bzero (95 samples, 0.07%)</title><rect x="34.1500%" y="133" width="0.0726%" height="15" fill="rgb(225,20,46)" fg:x="44689" fg:w="95"/><text x="34.4000%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (1,649 samples, 1.26%)</title><rect x="34.2226%" y="133" width="1.2601%" height="15" fill="rgb(210,31,41)" fg:x="44784" fg:w="1649"/><text x="34.4726%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (356 samples, 0.27%)</title><rect x="35.4827%" y="133" width="0.2720%" height="15" fill="rgb(221,200,47)" fg:x="46433" fg:w="356"/><text x="35.7327%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (19 samples, 0.01%)</title><rect x="36.8781%" y="117" width="0.0145%" height="15" fill="rgb(226,26,5)" fg:x="48259" fg:w="19"/><text x="37.1281%" y="127.50"></text></g><g><title>one_bill_row_challenge`alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (672 samples, 0.51%)</title><rect x="36.8956%" y="117" width="0.5135%" height="15" fill="rgb(249,33,26)" fg:x="48282" fg:w="672"/><text x="37.1456%" y="127.50"></text></g><g><title>one_bill_row_challenge`core::str::converts::from_utf8 (317 samples, 0.24%)</title><rect x="37.4092%" y="117" width="0.2422%" height="15" fill="rgb(235,183,28)" fg:x="48954" fg:w="317"/><text x="37.6592%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`read (3,581 samples, 2.74%)</title><rect x="40.2152%" y="101" width="2.7365%" height="15" fill="rgb(221,5,38)" fg:x="52626" fg:w="3581"/><text x="40.4652%" y="111.50">li..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (3,457 samples, 2.64%)</title><rect x="42.9517%" y="101" width="2.6417%" height="15" fill="rgb(247,18,42)" fg:x="56207" fg:w="3457"/><text x="43.2017%" y="111.50">li..</text></g><g><title>one_bill_row_challenge`DYLD-STUB$$memcpy (31 samples, 0.02%)</title><rect x="45.5957%" y="101" width="0.0237%" height="15" fill="rgb(241,131,45)" fg:x="59667" fg:w="31"/><text x="45.8457%" y="111.50"></text></g><g><title>one_bill_row_challenge`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (143 samples, 0.11%)</title><rect x="45.6209%" y="101" width="0.1093%" height="15" fill="rgb(249,31,29)" fg:x="59700" fg:w="143"/><text x="45.8709%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2,823 samples, 2.16%)</title><rect x="47.3097%" y="69" width="2.1573%" height="15" fill="rgb(225,111,53)" fg:x="61910" fg:w="2823"/><text x="47.5597%" y="79.50">l..</text></g><g><title>libsystem_malloc.dylib`malloc (48 samples, 0.04%)</title><rect x="49.4685%" y="69" width="0.0367%" height="15" fill="rgb(238,160,17)" fg:x="64735" fg:w="48"/><text x="49.7185%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3,318 samples, 2.54%)</title><rect x="49.5052%" y="69" width="2.5355%" height="15" fill="rgb(214,148,48)" fg:x="64783" fg:w="3318"/><text x="49.7552%" y="79.50">li..</text></g><g><title>one_bill_row_challenge`DYLD-STUB$$malloc (400 samples, 0.31%)</title><rect x="52.0407%" y="69" width="0.3057%" height="15" fill="rgb(232,36,49)" fg:x="68101" fg:w="400"/><text x="52.2907%" y="79.50"></text></g><g><title>one_bill_row_challenge`__rdl_alloc (555 samples, 0.42%)</title><rect x="52.3464%" y="69" width="0.4241%" height="15" fill="rgb(209,103,24)" fg:x="68501" fg:w="555"/><text x="52.5964%" y="79.50"></text></g><g><title>one_bill_row_challenge`__rust_alloc (108 samples, 0.08%)</title><rect x="52.7713%" y="69" width="0.0825%" height="15" fill="rgb(229,88,8)" fg:x="69057" fg:w="108"/><text x="53.0213%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (30 samples, 0.02%)</title><rect x="53.8709%" y="37" width="0.0229%" height="15" fill="rgb(213,181,19)" fg:x="70496" fg:w="30"/><text x="54.1209%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (42 samples, 0.03%)</title><rect x="53.8648%" y="53" width="0.0321%" height="15" fill="rgb(254,191,54)" fg:x="70488" fg:w="42"/><text x="54.1148%" y="63.50"></text></g><g><title>one_bill_row_challenge`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (9,537 samples, 7.29%)</title><rect x="46.6121%" y="85" width="7.2879%" height="15" fill="rgb(241,83,37)" fg:x="60997" fg:w="9537"/><text x="46.8621%" y="95.50">one_bill_r..</text></g><g><title>one_bill_row_challenge`alloc::raw_vec::finish_grow (1,369 samples, 1.05%)</title><rect x="52.8538%" y="69" width="1.0461%" height="15" fill="rgb(233,36,39)" fg:x="69165" fg:w="1369"/><text x="53.1038%" y="79.50"></text></g><g><title>one_bill_row_challenge`alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (11,016 samples, 8.42%)</title><rect x="45.7302%" y="101" width="8.4181%" height="15" fill="rgb(226,3,54)" fg:x="59843" fg:w="11016"/><text x="45.9802%" y="111.50">one_bill_row..</text></g><g><title>one_bill_row_challenge`alloc::raw_vec::finish_grow (325 samples, 0.25%)</title><rect x="53.8999%" y="85" width="0.2484%" height="15" fill="rgb(245,192,40)" fg:x="70534" fg:w="325"/><text x="54.1499%" y="95.50"></text></g><g><title>one_bill_row_challenge`core::slice::memchr::memchr_aligned (24,591 samples, 18.79%)</title><rect x="54.1483%" y="101" width="18.7917%" height="15" fill="rgb(238,167,29)" fg:x="70859" fg:w="24591"/><text x="54.3983%" y="111.50">one_bill_row_challenge`core::..</text></g><g><title>one_bill_row_challenge`&lt;std::io::Lines&lt;B&gt; as core::iter::traits::iterator::Iterator&gt;::next (60,500 samples, 46.23%)</title><rect x="35.7547%" y="133" width="46.2323%" height="15" fill="rgb(232,182,51)" fg:x="46789" fg:w="60500"/><text x="36.0047%" y="143.50">one_bill_row_challenge`&lt;std::io::Lines&lt;B&gt; as core::iter::traits::iterator::I..</text></g><g><title>one_bill_row_challenge`std::io::append_to_string (58,018 samples, 44.34%)</title><rect x="37.6514%" y="117" width="44.3356%" height="15" fill="rgb(231,60,39)" fg:x="49271" fg:w="58018"/><text x="37.9014%" y="127.50">one_bill_row_challenge`std::io::append_to_string</text></g><g><title>one_bill_row_challenge`core::str::converts::from_utf8 (11,839 samples, 9.05%)</title><rect x="72.9400%" y="101" width="9.0470%" height="15" fill="rgb(208,69,12)" fg:x="95450" fg:w="11839"/><text x="73.1900%" y="111.50">one_bill_row_..</text></g><g><title>one_bill_row_challenge`DYLD-STUB$$memcmp (391 samples, 0.30%)</title><rect x="81.9870%" y="133" width="0.2988%" height="15" fill="rgb(235,93,37)" fg:x="107289" fg:w="391"/><text x="82.2370%" y="143.50"></text></g><g><title>one_bill_row_challenge`core::hash::BuildHasher::hash_one (25 samples, 0.02%)</title><rect x="82.2865%" y="133" width="0.0191%" height="15" fill="rgb(213,116,39)" fg:x="107681" fg:w="25"/><text x="82.5365%" y="143.50"></text></g><g><title>one_bill_row_challenge`core::num::dec2flt::_&lt;impl core::str::traits::FromStr for f64&gt;::from_str (7,340 samples, 5.61%)</title><rect x="82.3057%" y="133" width="5.6090%" height="15" fill="rgb(222,207,29)" fg:x="107706" fg:w="7340"/><text x="82.5557%" y="143.50">one_bil..</text></g><g><title>one_bill_row_challenge`core::num::dec2flt::parse::parse_number (4,295 samples, 3.28%)</title><rect x="84.6325%" y="117" width="3.2821%" height="15" fill="rgb(206,96,30)" fg:x="110751" fg:w="4295"/><text x="84.8825%" y="127.50">one..</text></g><g><title>one_bill_row_challenge`core::num::dec2flt::parse::parse_number (482 samples, 0.37%)</title><rect x="87.9147%" y="133" width="0.3683%" height="15" fill="rgb(218,138,4)" fg:x="115046" fg:w="482"/><text x="88.1647%" y="143.50"></text></g><g><title>one_bill_row_challenge`core::slice::memchr::memchr_aligned (3,625 samples, 2.77%)</title><rect x="88.2830%" y="133" width="2.7701%" height="15" fill="rgb(250,191,14)" fg:x="115528" fg:w="3625"/><text x="88.5330%" y="143.50">on..</text></g><g><title>one_bill_row_challenge`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4,513 samples, 3.45%)</title><rect x="92.6051%" y="117" width="3.4487%" height="15" fill="rgb(239,60,40)" fg:x="121184" fg:w="4513"/><text x="92.8551%" y="127.50">one..</text></g><g><title>one_bill_row_challenge`core::hash::BuildHasher::hash_one (4,186 samples, 3.20%)</title><rect x="96.0538%" y="117" width="3.1988%" height="15" fill="rgb(206,27,48)" fg:x="125697" fg:w="4186"/><text x="96.3038%" y="127.50">one..</text></g><g><title>one_bill_row_challenge`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (10,731 samples, 8.20%)</title><rect x="91.0531%" y="133" width="8.2003%" height="15" fill="rgb(225,35,8)" fg:x="119153" fg:w="10731"/><text x="91.3031%" y="143.50">one_bill_ro..</text></g><g><title>one_bill_row_challenge`std::io::append_to_string (970 samples, 0.74%)</title><rect x="99.2534%" y="133" width="0.7412%" height="15" fill="rgb(250,213,24)" fg:x="129884" fg:w="970"/><text x="99.5034%" y="143.50"></text></g><g><title>dyld`start (130,860 samples, 100.00%)</title><rect x="0.0000%" y="245" width="99.9992%" height="15" fill="rgb(247,123,22)" fg:x="0" fg:w="130860"/><text x="0.2500%" y="255.50">dyld`start</text></g><g><title>one_bill_row_challenge`main (130,860 samples, 100.00%)</title><rect x="0.0000%" y="229" width="99.9992%" height="15" fill="rgb(231,138,38)" fg:x="0" fg:w="130860"/><text x="0.2500%" y="239.50">one_bill_row_challenge`main</text></g><g><title>one_bill_row_challenge`std::rt::lang_start_internal (130,860 samples, 100.00%)</title><rect x="0.0000%" y="213" width="99.9992%" height="15" fill="rgb(231,145,46)" fg:x="0" fg:w="130860"/><text x="0.2500%" y="223.50">one_bill_row_challenge`std::rt::lang_start_internal</text></g><g><title>one_bill_row_challenge`std::panicking::try (130,860 samples, 100.00%)</title><rect x="0.0000%" y="197" width="99.9992%" height="15" fill="rgb(251,118,11)" fg:x="0" fg:w="130860"/><text x="0.2500%" y="207.50">one_bill_row_challenge`std::panicking::try</text></g><g><title>one_bill_row_challenge`std::rt::lang_start::_{{closure}} (130,860 samples, 100.00%)</title><rect x="0.0000%" y="181" width="99.9992%" height="15" fill="rgb(217,147,25)" fg:x="0" fg:w="130860"/><text x="0.2500%" y="191.50">one_bill_row_challenge`std::rt::lang_start::_{{closure}}</text></g><g><title>one_bill_row_challenge`std::sys_common::backtrace::__rust_begin_short_backtrace (130,860 samples, 100.00%)</title><rect x="0.0000%" y="165" width="99.9992%" height="15" fill="rgb(247,81,37)" fg:x="0" fg:w="130860"/><text x="0.2500%" y="175.50">one_bill_row_challenge`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>one_bill_row_challenge`one_bill_row_challenge::main (104,020 samples, 79.49%)</title><rect x="20.5103%" y="149" width="79.4889%" height="15" fill="rgb(209,12,38)" fg:x="26840" fg:w="104020"/><text x="20.7603%" y="159.50">one_bill_row_challenge`one_bill_row_challenge::main</text></g><g><title>all (130,861 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(227,1,9)" fg:x="0" fg:w="130861"/><text x="0.2500%" y="271.50"></text></g></svg></svg>