<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="357.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="357.00"> </text><svg id="frames" x="10" width="1180" total_samples="168769"><g><title>libsystem_kernel.dylib`__munmap (34 samples, 0.02%)</title><rect x="0.0000%" y="213" width="0.0201%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="34"/><text x="0.2500%" y="223.50"></text></g><g><title>dyld`start (42 samples, 0.02%)</title><rect x="0.0000%" y="309" width="0.0249%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="42"/><text x="0.2500%" y="319.50"></text></g><g><title>one_bill_row_challenge`main (42 samples, 0.02%)</title><rect x="0.0000%" y="293" width="0.0249%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="42"/><text x="0.2500%" y="303.50"></text></g><g><title>one_bill_row_challenge`std::rt::lang_start_internal (42 samples, 0.02%)</title><rect x="0.0000%" y="277" width="0.0249%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="42"/><text x="0.2500%" y="287.50"></text></g><g><title>one_bill_row_challenge`std::panicking::try (42 samples, 0.02%)</title><rect x="0.0000%" y="261" width="0.0249%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="42"/><text x="0.2500%" y="271.50"></text></g><g><title>one_bill_row_challenge`std::rt::lang_start::_{{closure}} (42 samples, 0.02%)</title><rect x="0.0000%" y="245" width="0.0249%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="42"/><text x="0.2500%" y="255.50"></text></g><g><title>one_bill_row_challenge`std::sys_common::backtrace::__rust_begin_short_backtrace (42 samples, 0.02%)</title><rect x="0.0000%" y="229" width="0.0249%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="42"/><text x="0.2500%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_free (2,624 samples, 1.55%)</title><rect x="0.0255%" y="149" width="1.5548%" height="15" fill="rgb(228,23,34)" fg:x="43" fg:w="2624"/><text x="0.2755%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1,131 samples, 0.67%)</title><rect x="1.5803%" y="149" width="0.6701%" height="15" fill="rgb(218,30,26)" fg:x="2667" fg:w="1131"/><text x="1.8303%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (529 samples, 0.31%)</title><rect x="2.2504%" y="149" width="0.3134%" height="15" fill="rgb(220,122,19)" fg:x="3798" fg:w="529"/><text x="2.5004%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (17 samples, 0.01%)</title><rect x="2.5639%" y="149" width="0.0101%" height="15" fill="rgb(250,228,42)" fg:x="4327" fg:w="17"/><text x="2.8139%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2,799 samples, 1.66%)</title><rect x="2.5810%" y="149" width="1.6585%" height="15" fill="rgb(240,193,28)" fg:x="4356" fg:w="2799"/><text x="2.8310%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (4,036 samples, 2.39%)</title><rect x="4.2413%" y="149" width="2.3914%" height="15" fill="rgb(216,20,37)" fg:x="7158" fg:w="4036"/><text x="4.4913%" y="159.50">li..</text></g><g><title>one_bill_row_challenge`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (419 samples, 0.25%)</title><rect x="6.6327%" y="149" width="0.2483%" height="15" fill="rgb(206,188,39)" fg:x="11194" fg:w="419"/><text x="6.8827%" y="159.50"></text></g><g><title>one_bill_row_challenge`DYLD-STUB$$free (778 samples, 0.46%)</title><rect x="6.8810%" y="149" width="0.4610%" height="15" fill="rgb(217,207,13)" fg:x="11613" fg:w="778"/><text x="7.1310%" y="159.50"></text></g><g><title>one_bill_row_challenge`DYLD-STUB$$malloc (159 samples, 0.09%)</title><rect x="7.3420%" y="149" width="0.0942%" height="15" fill="rgb(231,73,38)" fg:x="12391" fg:w="159"/><text x="7.5920%" y="159.50"></text></g><g><title>one_bill_row_challenge`DYLD-STUB$$memcpy (96 samples, 0.06%)</title><rect x="7.4362%" y="149" width="0.0569%" height="15" fill="rgb(225,20,46)" fg:x="12550" fg:w="96"/><text x="7.6862%" y="159.50"></text></g><g><title>one_bill_row_challenge`__rdl_alloc (155 samples, 0.09%)</title><rect x="7.4931%" y="149" width="0.0918%" height="15" fill="rgb(210,31,41)" fg:x="12646" fg:w="155"/><text x="7.7431%" y="159.50"></text></g><g><title>one_bill_row_challenge`__rdl_dealloc (44 samples, 0.03%)</title><rect x="7.5849%" y="149" width="0.0261%" height="15" fill="rgb(221,200,47)" fg:x="12801" fg:w="44"/><text x="7.8349%" y="159.50"></text></g><g><title>one_bill_row_challenge`__rust_dealloc (33 samples, 0.02%)</title><rect x="7.6128%" y="149" width="0.0196%" height="15" fill="rgb(226,26,5)" fg:x="12848" fg:w="33"/><text x="7.8628%" y="159.50"></text></g><g><title>one_bill_row_challenge`core::num::dec2flt::_&lt;impl core::str::traits::FromStr for f64&gt;::from_str (584 samples, 0.35%)</title><rect x="7.6323%" y="149" width="0.3460%" height="15" fill="rgb(249,33,26)" fg:x="12881" fg:w="584"/><text x="7.8823%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (148 samples, 0.09%)</title><rect x="15.4744%" y="133" width="0.0877%" height="15" fill="rgb(235,183,28)" fg:x="26116" fg:w="148"/><text x="15.7244%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2,033 samples, 1.20%)</title><rect x="15.5621%" y="133" width="1.2046%" height="15" fill="rgb(221,5,38)" fg:x="26264" fg:w="2033"/><text x="15.8121%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (4,209 samples, 2.49%)</title><rect x="16.7667%" y="133" width="2.4939%" height="15" fill="rgb(247,18,42)" fg:x="28297" fg:w="4209"/><text x="17.0167%" y="143.50">li..</text></g><g><title>libsystem_malloc.dylib`malloc (85 samples, 0.05%)</title><rect x="19.2606%" y="133" width="0.0504%" height="15" fill="rgb(241,131,45)" fg:x="32506" fg:w="85"/><text x="19.5106%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3,526 samples, 2.09%)</title><rect x="19.3110%" y="133" width="2.0892%" height="15" fill="rgb(249,31,29)" fg:x="32591" fg:w="3526"/><text x="19.5610%" y="143.50">l..</text></g><g><title>libsystem_platform.dylib`__bzero (128 samples, 0.08%)</title><rect x="21.4003%" y="133" width="0.0758%" height="15" fill="rgb(225,111,53)" fg:x="36117" fg:w="128"/><text x="21.6503%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (1,129 samples, 0.67%)</title><rect x="21.4761%" y="133" width="0.6690%" height="15" fill="rgb(238,160,17)" fg:x="36245" fg:w="1129"/><text x="21.7261%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (677 samples, 0.40%)</title><rect x="22.1451%" y="133" width="0.4011%" height="15" fill="rgb(214,148,48)" fg:x="37374" fg:w="677"/><text x="22.3951%" y="143.50"></text></g><g><title>one_bill_row_challenge`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (17,411 samples, 10.32%)</title><rect x="22.5462%" y="133" width="10.3165%" height="15" fill="rgb(232,36,49)" fg:x="38051" fg:w="17411"/><text x="22.7962%" y="143.50">one_bill_row_ch..</text></g><g><title>one_bill_row_challenge`core::str::converts::from_utf8 (10,373 samples, 6.15%)</title><rect x="26.7164%" y="117" width="6.1463%" height="15" fill="rgb(209,103,24)" fg:x="45089" fg:w="10373"/><text x="26.9664%" y="127.50">one_bill..</text></g><g><title>one_bill_row_challenge`DYLD-STUB$$malloc (365 samples, 0.22%)</title><rect x="32.8627%" y="133" width="0.2163%" height="15" fill="rgb(229,88,8)" fg:x="55462" fg:w="365"/><text x="33.1127%" y="143.50"></text></g><g><title>one_bill_row_challenge`DYLD-STUB$$memcmp (192 samples, 0.11%)</title><rect x="33.0789%" y="133" width="0.1138%" height="15" fill="rgb(213,181,19)" fg:x="55827" fg:w="192"/><text x="33.3289%" y="143.50"></text></g><g><title>one_bill_row_challenge`__rdl_alloc (466 samples, 0.28%)</title><rect x="33.1927%" y="133" width="0.2761%" height="15" fill="rgb(254,191,54)" fg:x="56019" fg:w="466"/><text x="33.4427%" y="143.50"></text></g><g><title>one_bill_row_challenge`core::num::dec2flt::_&lt;impl core::str::traits::FromStr for f64&gt;::from_str (2,888 samples, 1.71%)</title><rect x="33.4700%" y="133" width="1.7112%" height="15" fill="rgb(241,83,37)" fg:x="56487" fg:w="2888"/><text x="33.7200%" y="143.50"></text></g><g><title>one_bill_row_challenge`core::num::dec2flt::parse::parse_number (1,754 samples, 1.04%)</title><rect x="34.1419%" y="117" width="1.0393%" height="15" fill="rgb(233,36,39)" fg:x="57621" fg:w="1754"/><text x="34.3919%" y="127.50"></text></g><g><title>one_bill_row_challenge`core::num::dec2flt::parse::parse_number (195 samples, 0.12%)</title><rect x="35.1812%" y="133" width="0.1155%" height="15" fill="rgb(226,3,54)" fg:x="59375" fg:w="195"/><text x="35.4312%" y="143.50"></text></g><g><title>one_bill_row_challenge`core::str::converts::from_utf8 (346 samples, 0.21%)</title><rect x="35.2968%" y="133" width="0.2050%" height="15" fill="rgb(245,192,40)" fg:x="59570" fg:w="346"/><text x="35.5468%" y="143.50"></text></g><g><title>one_bill_row_challenge`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (49,041 samples, 29.06%)</title><rect x="7.9784%" y="149" width="29.0581%" height="15" fill="rgb(238,167,29)" fg:x="13465" fg:w="49041"/><text x="8.2284%" y="159.50">one_bill_row_challenge`core::ops::function::imp..</text></g><g><title>one_bill_row_challenge`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (2,590 samples, 1.53%)</title><rect x="35.5018%" y="133" width="1.5346%" height="15" fill="rgb(232,182,51)" fg:x="59916" fg:w="2590"/><text x="35.7518%" y="143.50"></text></g><g><title>one_bill_row_challenge`core::str::_&lt;impl str&gt;::trim_matches (3,195 samples, 1.89%)</title><rect x="37.0364%" y="149" width="1.8931%" height="15" fill="rgb(231,60,39)" fg:x="62506" fg:w="3195"/><text x="37.2864%" y="159.50">o..</text></g><g><title>one_bill_row_challenge`rayon::iter::plumbing::Folder::consume_iter (66,134 samples, 39.19%)</title><rect x="0.0255%" y="165" width="39.1861%" height="15" fill="rgb(208,69,12)" fg:x="43" fg:w="66134"/><text x="0.2755%" y="175.50">one_bill_row_challenge`rayon::iter::plumbing::Folder::consume_it..</text></g><g><title>one_bill_row_challenge`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (476 samples, 0.28%)</title><rect x="38.9295%" y="149" width="0.2820%" height="15" fill="rgb(235,93,37)" fg:x="65701" fg:w="476"/><text x="39.1795%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_free (2,666 samples, 1.58%)</title><rect x="39.2116%" y="117" width="1.5797%" height="15" fill="rgb(213,116,39)" fg:x="66177" fg:w="2666"/><text x="39.4616%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1,222 samples, 0.72%)</title><rect x="40.7913%" y="117" width="0.7241%" height="15" fill="rgb(222,207,29)" fg:x="68843" fg:w="1222"/><text x="41.0413%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (540 samples, 0.32%)</title><rect x="41.5153%" y="117" width="0.3200%" height="15" fill="rgb(206,96,30)" fg:x="70065" fg:w="540"/><text x="41.7653%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (22 samples, 0.01%)</title><rect x="41.8353%" y="117" width="0.0130%" height="15" fill="rgb(218,138,4)" fg:x="70605" fg:w="22"/><text x="42.0853%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3,000 samples, 1.78%)</title><rect x="41.8560%" y="117" width="1.7776%" height="15" fill="rgb(250,191,14)" fg:x="70640" fg:w="3000"/><text x="42.1060%" y="127.50">l..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (4,325 samples, 2.56%)</title><rect x="43.6354%" y="117" width="2.5627%" height="15" fill="rgb(239,60,40)" fg:x="73643" fg:w="4325"/><text x="43.8854%" y="127.50">li..</text></g><g><title>one_bill_row_challenge`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (419 samples, 0.25%)</title><rect x="46.1981%" y="117" width="0.2483%" height="15" fill="rgb(206,27,48)" fg:x="77968" fg:w="419"/><text x="46.4481%" y="127.50"></text></g><g><title>one_bill_row_challenge`DYLD-STUB$$free (778 samples, 0.46%)</title><rect x="46.4463%" y="117" width="0.4610%" height="15" fill="rgb(225,35,8)" fg:x="78387" fg:w="778"/><text x="46.6963%" y="127.50"></text></g><g><title>one_bill_row_challenge`DYLD-STUB$$malloc (174 samples, 0.10%)</title><rect x="46.9073%" y="117" width="0.1031%" height="15" fill="rgb(250,213,24)" fg:x="79165" fg:w="174"/><text x="47.1573%" y="127.50"></text></g><g><title>one_bill_row_challenge`DYLD-STUB$$memcpy (91 samples, 0.05%)</title><rect x="47.0104%" y="117" width="0.0539%" height="15" fill="rgb(247,123,22)" fg:x="79339" fg:w="91"/><text x="47.2604%" y="127.50"></text></g><g><title>one_bill_row_challenge`__rdl_alloc (138 samples, 0.08%)</title><rect x="47.0643%" y="117" width="0.0818%" height="15" fill="rgb(231,138,38)" fg:x="79430" fg:w="138"/><text x="47.3143%" y="127.50"></text></g><g><title>one_bill_row_challenge`__rdl_dealloc (68 samples, 0.04%)</title><rect x="47.1461%" y="117" width="0.0403%" height="15" fill="rgb(231,145,46)" fg:x="79568" fg:w="68"/><text x="47.3961%" y="127.50"></text></g><g><title>one_bill_row_challenge`__rust_dealloc (45 samples, 0.03%)</title><rect x="47.1864%" y="117" width="0.0267%" height="15" fill="rgb(251,118,11)" fg:x="79636" fg:w="45"/><text x="47.4364%" y="127.50"></text></g><g><title>one_bill_row_challenge`core::num::dec2flt::_&lt;impl core::str::traits::FromStr for f64&gt;::from_str (560 samples, 0.33%)</title><rect x="47.2131%" y="117" width="0.3318%" height="15" fill="rgb(217,147,25)" fg:x="79681" fg:w="560"/><text x="47.4631%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (134 samples, 0.08%)</title><rect x="55.3135%" y="101" width="0.0794%" height="15" fill="rgb(247,81,37)" fg:x="93352" fg:w="134"/><text x="55.5635%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2,030 samples, 1.20%)</title><rect x="55.3929%" y="101" width="1.2028%" height="15" fill="rgb(209,12,38)" fg:x="93486" fg:w="2030"/><text x="55.6429%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (4,371 samples, 2.59%)</title><rect x="56.5957%" y="101" width="2.5899%" height="15" fill="rgb(227,1,9)" fg:x="95516" fg:w="4371"/><text x="56.8457%" y="111.50">li..</text></g><g><title>libsystem_malloc.dylib`malloc (90 samples, 0.05%)</title><rect x="59.1856%" y="101" width="0.0533%" height="15" fill="rgb(248,47,43)" fg:x="99887" fg:w="90"/><text x="59.4356%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3,471 samples, 2.06%)</title><rect x="59.2390%" y="101" width="2.0567%" height="15" fill="rgb(221,10,30)" fg:x="99977" fg:w="3471"/><text x="59.4890%" y="111.50">l..</text></g><g><title>libsystem_platform.dylib`__bzero (153 samples, 0.09%)</title><rect x="61.2956%" y="101" width="0.0907%" height="15" fill="rgb(210,229,1)" fg:x="103448" fg:w="153"/><text x="61.5456%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (1,200 samples, 0.71%)</title><rect x="61.3863%" y="101" width="0.7110%" height="15" fill="rgb(222,148,37)" fg:x="103601" fg:w="1200"/><text x="61.6363%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (681 samples, 0.40%)</title><rect x="62.0973%" y="101" width="0.4035%" height="15" fill="rgb(234,67,33)" fg:x="104801" fg:w="681"/><text x="62.3473%" y="111.50"></text></g><g><title>one_bill_row_challenge`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (18,115 samples, 10.73%)</title><rect x="62.5008%" y="101" width="10.7336%" height="15" fill="rgb(247,98,35)" fg:x="105482" fg:w="18115"/><text x="62.7508%" y="111.50">one_bill_row_cha..</text></g><g><title>one_bill_row_challenge`core::str::converts::from_utf8 (10,953 samples, 6.49%)</title><rect x="66.7445%" y="85" width="6.4899%" height="15" fill="rgb(247,138,52)" fg:x="112644" fg:w="10953"/><text x="66.9945%" y="95.50">one_bill..</text></g><g><title>one_bill_row_challenge`DYLD-STUB$$malloc (382 samples, 0.23%)</title><rect x="73.2344%" y="101" width="0.2263%" height="15" fill="rgb(213,79,30)" fg:x="123597" fg:w="382"/><text x="73.4844%" y="111.50"></text></g><g><title>one_bill_row_challenge`DYLD-STUB$$memcmp (203 samples, 0.12%)</title><rect x="73.4608%" y="101" width="0.1203%" height="15" fill="rgb(246,177,23)" fg:x="123979" fg:w="203"/><text x="73.7108%" y="111.50"></text></g><g><title>one_bill_row_challenge`__rdl_alloc (556 samples, 0.33%)</title><rect x="73.5810%" y="101" width="0.3294%" height="15" fill="rgb(230,62,27)" fg:x="124182" fg:w="556"/><text x="73.8310%" y="111.50"></text></g><g><title>one_bill_row_challenge`core::num::dec2flt::_&lt;impl core::str::traits::FromStr for f64&gt;::from_str (2,911 samples, 1.72%)</title><rect x="73.9123%" y="101" width="1.7248%" height="15" fill="rgb(216,154,8)" fg:x="124741" fg:w="2911"/><text x="74.1623%" y="111.50"></text></g><g><title>one_bill_row_challenge`core::num::dec2flt::parse::parse_number (1,737 samples, 1.03%)</title><rect x="74.6079%" y="85" width="1.0292%" height="15" fill="rgb(244,35,45)" fg:x="125915" fg:w="1737"/><text x="74.8579%" y="95.50"></text></g><g><title>one_bill_row_challenge`core::num::dec2flt::parse::parse_number (198 samples, 0.12%)</title><rect x="75.6371%" y="101" width="0.1173%" height="15" fill="rgb(251,115,12)" fg:x="127652" fg:w="198"/><text x="75.8871%" y="111.50"></text></g><g><title>one_bill_row_challenge`core::str::converts::from_utf8 (394 samples, 0.23%)</title><rect x="75.7544%" y="101" width="0.2335%" height="15" fill="rgb(240,54,50)" fg:x="127850" fg:w="394"/><text x="76.0044%" y="111.50"></text></g><g><title>one_bill_row_challenge`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (50,720 samples, 30.05%)</title><rect x="47.5449%" y="117" width="30.0529%" height="15" fill="rgb(233,84,52)" fg:x="80241" fg:w="50720"/><text x="47.7949%" y="127.50">one_bill_row_challenge`core::ops::function::impl..</text></g><g><title>one_bill_row_challenge`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (2,717 samples, 1.61%)</title><rect x="75.9879%" y="101" width="1.6099%" height="15" fill="rgb(207,117,47)" fg:x="128244" fg:w="2717"/><text x="76.2379%" y="111.50"></text></g><g><title>one_bill_row_challenge`core::str::_&lt;impl str&gt;::trim_matches (3,173 samples, 1.88%)</title><rect x="77.5978%" y="117" width="1.8801%" height="15" fill="rgb(249,43,39)" fg:x="130961" fg:w="3173"/><text x="77.8478%" y="127.50">o..</text></g><g><title>one_bill_row_challenge`rayon::iter::plumbing::Folder::consume_iter (68,423 samples, 40.54%)</title><rect x="39.2116%" y="133" width="40.5424%" height="15" fill="rgb(209,38,44)" fg:x="66177" fg:w="68423"/><text x="39.4616%" y="143.50">one_bill_row_challenge`rayon::iter::plumbing::Folder::consume_iter</text></g><g><title>one_bill_row_challenge`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (466 samples, 0.28%)</title><rect x="79.4779%" y="117" width="0.2761%" height="15" fill="rgb(236,212,23)" fg:x="134134" fg:w="466"/><text x="79.7279%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_free (651 samples, 0.39%)</title><rect x="79.7540%" y="85" width="0.3857%" height="15" fill="rgb(242,79,21)" fg:x="134600" fg:w="651"/><text x="80.0040%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (307 samples, 0.18%)</title><rect x="80.1397%" y="85" width="0.1819%" height="15" fill="rgb(211,96,35)" fg:x="135251" fg:w="307"/><text x="80.3897%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (139 samples, 0.08%)</title><rect x="80.3216%" y="85" width="0.0824%" height="15" fill="rgb(253,215,40)" fg:x="135558" fg:w="139"/><text x="80.5716%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (745 samples, 0.44%)</title><rect x="80.4093%" y="85" width="0.4414%" height="15" fill="rgb(211,81,21)" fg:x="135706" fg:w="745"/><text x="80.6593%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1,129 samples, 0.67%)</title><rect x="80.8525%" y="85" width="0.6690%" height="15" fill="rgb(208,190,38)" fg:x="136454" fg:w="1129"/><text x="81.1025%" y="95.50"></text></g><g><title>one_bill_row_challenge`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (109 samples, 0.06%)</title><rect x="81.5215%" y="85" width="0.0646%" height="15" fill="rgb(235,213,38)" fg:x="137583" fg:w="109"/><text x="81.7715%" y="95.50"></text></g><g><title>one_bill_row_challenge`DYLD-STUB$$free (191 samples, 0.11%)</title><rect x="81.5861%" y="85" width="0.1132%" height="15" fill="rgb(237,122,38)" fg:x="137692" fg:w="191"/><text x="81.8361%" y="95.50"></text></g><g><title>one_bill_row_challenge`DYLD-STUB$$malloc (42 samples, 0.02%)</title><rect x="81.6992%" y="85" width="0.0249%" height="15" fill="rgb(244,218,35)" fg:x="137883" fg:w="42"/><text x="81.9492%" y="95.50"></text></g><g><title>one_bill_row_challenge`DYLD-STUB$$memcpy (17 samples, 0.01%)</title><rect x="81.7241%" y="85" width="0.0101%" height="15" fill="rgb(240,68,47)" fg:x="137925" fg:w="17"/><text x="81.9741%" y="95.50"></text></g><g><title>one_bill_row_challenge`__rdl_alloc (49 samples, 0.03%)</title><rect x="81.7342%" y="85" width="0.0290%" height="15" fill="rgb(210,16,53)" fg:x="137942" fg:w="49"/><text x="81.9842%" y="95.50"></text></g><g><title>one_bill_row_challenge`core::num::dec2flt::_&lt;impl core::str::traits::FromStr for f64&gt;::from_str (144 samples, 0.09%)</title><rect x="81.7775%" y="85" width="0.0853%" height="15" fill="rgb(235,124,12)" fg:x="138015" fg:w="144"/><text x="82.0275%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (43 samples, 0.03%)</title><rect x="83.8193%" y="69" width="0.0255%" height="15" fill="rgb(224,169,11)" fg:x="141461" fg:w="43"/><text x="84.0693%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (528 samples, 0.31%)</title><rect x="83.8448%" y="69" width="0.3129%" height="15" fill="rgb(250,166,2)" fg:x="141504" fg:w="528"/><text x="84.0948%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1,004 samples, 0.59%)</title><rect x="84.1576%" y="69" width="0.5949%" height="15" fill="rgb(242,216,29)" fg:x="142032" fg:w="1004"/><text x="84.4076%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`malloc (26 samples, 0.02%)</title><rect x="84.7525%" y="69" width="0.0154%" height="15" fill="rgb(230,116,27)" fg:x="143036" fg:w="26"/><text x="85.0025%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (887 samples, 0.53%)</title><rect x="84.7679%" y="69" width="0.5256%" height="15" fill="rgb(228,99,48)" fg:x="143062" fg:w="887"/><text x="85.0179%" y="79.50"></text></g><g><title>libsystem_platform.dylib`__bzero (28 samples, 0.02%)</title><rect x="85.2935%" y="69" width="0.0166%" height="15" fill="rgb(253,11,6)" fg:x="143949" fg:w="28"/><text x="85.5435%" y="79.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (294 samples, 0.17%)</title><rect x="85.3101%" y="69" width="0.1742%" height="15" fill="rgb(247,143,39)" fg:x="143977" fg:w="294"/><text x="85.5601%" y="79.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (169 samples, 0.10%)</title><rect x="85.4843%" y="69" width="0.1001%" height="15" fill="rgb(236,97,10)" fg:x="144271" fg:w="169"/><text x="85.7343%" y="79.50"></text></g><g><title>one_bill_row_challenge`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4,586 samples, 2.72%)</title><rect x="85.5844%" y="69" width="2.7173%" height="15" fill="rgb(233,208,19)" fg:x="144440" fg:w="4586"/><text x="85.8344%" y="79.50">on..</text></g><g><title>one_bill_row_challenge`core::str::converts::from_utf8 (2,792 samples, 1.65%)</title><rect x="86.6474%" y="53" width="1.6543%" height="15" fill="rgb(216,164,2)" fg:x="146234" fg:w="2792"/><text x="86.8974%" y="63.50"></text></g><g><title>one_bill_row_challenge`DYLD-STUB$$malloc (102 samples, 0.06%)</title><rect x="88.3018%" y="69" width="0.0604%" height="15" fill="rgb(220,129,5)" fg:x="149026" fg:w="102"/><text x="88.5518%" y="79.50"></text></g><g><title>one_bill_row_challenge`DYLD-STUB$$memcmp (56 samples, 0.03%)</title><rect x="88.3622%" y="69" width="0.0332%" height="15" fill="rgb(242,17,10)" fg:x="149128" fg:w="56"/><text x="88.6122%" y="79.50"></text></g><g><title>one_bill_row_challenge`__rdl_alloc (131 samples, 0.08%)</title><rect x="88.3954%" y="69" width="0.0776%" height="15" fill="rgb(242,107,0)" fg:x="149184" fg:w="131"/><text x="88.6454%" y="79.50"></text></g><g><title>one_bill_row_challenge`core::num::dec2flt::_&lt;impl core::str::traits::FromStr for f64&gt;::from_str (714 samples, 0.42%)</title><rect x="88.4730%" y="69" width="0.4231%" height="15" fill="rgb(251,28,31)" fg:x="149315" fg:w="714"/><text x="88.7230%" y="79.50"></text></g><g><title>one_bill_row_challenge`core::num::dec2flt::parse::parse_number (437 samples, 0.26%)</title><rect x="88.6371%" y="53" width="0.2589%" height="15" fill="rgb(233,223,10)" fg:x="149592" fg:w="437"/><text x="88.8871%" y="63.50"></text></g><g><title>one_bill_row_challenge`core::num::dec2flt::parse::parse_number (41 samples, 0.02%)</title><rect x="88.8961%" y="69" width="0.0243%" height="15" fill="rgb(215,21,27)" fg:x="150029" fg:w="41"/><text x="89.1461%" y="79.50"></text></g><g><title>one_bill_row_challenge`core::str::converts::from_utf8 (99 samples, 0.06%)</title><rect x="88.9204%" y="69" width="0.0587%" height="15" fill="rgb(232,23,21)" fg:x="150070" fg:w="99"/><text x="89.1704%" y="79.50"></text></g><g><title>one_bill_row_challenge`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (12,655 samples, 7.50%)</title><rect x="81.8628%" y="85" width="7.4984%" height="15" fill="rgb(244,5,23)" fg:x="138159" fg:w="12655"/><text x="82.1128%" y="95.50">one_bill_r..</text></g><g><title>one_bill_row_challenge`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (645 samples, 0.38%)</title><rect x="88.9790%" y="69" width="0.3822%" height="15" fill="rgb(226,81,46)" fg:x="150169" fg:w="645"/><text x="89.2290%" y="79.50"></text></g><g><title>one_bill_row_challenge`core::str::_&lt;impl str&gt;::trim_matches (797 samples, 0.47%)</title><rect x="89.3612%" y="85" width="0.4722%" height="15" fill="rgb(247,70,30)" fg:x="150814" fg:w="797"/><text x="89.6112%" y="95.50"></text></g><g><title>one_bill_row_challenge`rayon::iter::plumbing::bridge_producer_consumer::helper (151,688 samples, 89.88%)</title><rect x="0.0255%" y="181" width="89.8791%" height="15" fill="rgb(212,68,19)" fg:x="43" fg:w="151688"/><text x="0.2755%" y="191.50">one_bill_row_challenge`rayon::iter::plumbing::bridge_producer_consumer::helper</text></g><g><title>one_bill_row_challenge`rayon_core::join::join_context::_{{closure}} (85,554 samples, 50.69%)</title><rect x="39.2116%" y="165" width="50.6930%" height="15" fill="rgb(240,187,13)" fg:x="66177" fg:w="85554"/><text x="39.4616%" y="175.50">one_bill_row_challenge`rayon_core::join::join_context::_{{closure}}</text></g><g><title>one_bill_row_challenge`rayon::iter::plumbing::bridge_producer_consumer::helper (85,554 samples, 50.69%)</title><rect x="39.2116%" y="149" width="50.6930%" height="15" fill="rgb(223,113,26)" fg:x="66177" fg:w="85554"/><text x="39.4616%" y="159.50">one_bill_row_challenge`rayon::iter::plumbing::bridge_producer_consumer::helper</text></g><g><title>one_bill_row_challenge`rayon_core::join::join_context::_{{closure}} (17,131 samples, 10.15%)</title><rect x="79.7540%" y="133" width="10.1506%" height="15" fill="rgb(206,192,2)" fg:x="134600" fg:w="17131"/><text x="80.0040%" y="143.50">one_bill_row_ch..</text></g><g><title>one_bill_row_challenge`rayon::iter::plumbing::bridge_producer_consumer::helper (17,131 samples, 10.15%)</title><rect x="79.7540%" y="117" width="10.1506%" height="15" fill="rgb(241,108,4)" fg:x="134600" fg:w="17131"/><text x="80.0040%" y="127.50">one_bill_row_ch..</text></g><g><title>one_bill_row_challenge`rayon::iter::plumbing::Folder::consume_iter (17,131 samples, 10.15%)</title><rect x="79.7540%" y="101" width="10.1506%" height="15" fill="rgb(247,173,49)" fg:x="134600" fg:w="17131"/><text x="80.0040%" y="111.50">one_bill_row_ch..</text></g><g><title>one_bill_row_challenge`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (120 samples, 0.07%)</title><rect x="89.8334%" y="85" width="0.0711%" height="15" fill="rgb(224,114,35)" fg:x="151611" fg:w="120"/><text x="90.0834%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_free (635 samples, 0.38%)</title><rect x="89.9069%" y="69" width="0.3763%" height="15" fill="rgb(245,159,27)" fg:x="151735" fg:w="635"/><text x="90.1569%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (278 samples, 0.16%)</title><rect x="90.2832%" y="69" width="0.1647%" height="15" fill="rgb(245,172,44)" fg:x="152370" fg:w="278"/><text x="90.5332%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (152 samples, 0.09%)</title><rect x="90.4479%" y="69" width="0.0901%" height="15" fill="rgb(236,23,11)" fg:x="152648" fg:w="152"/><text x="90.6979%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (773 samples, 0.46%)</title><rect x="90.5433%" y="69" width="0.4580%" height="15" fill="rgb(205,117,38)" fg:x="152809" fg:w="773"/><text x="90.7933%" y="79.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1,104 samples, 0.65%)</title><rect x="91.0019%" y="69" width="0.6541%" height="15" fill="rgb(237,72,25)" fg:x="153583" fg:w="1104"/><text x="91.2519%" y="79.50"></text></g><g><title>one_bill_row_challenge`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (91 samples, 0.05%)</title><rect x="91.6561%" y="69" width="0.0539%" height="15" fill="rgb(244,70,9)" fg:x="154687" fg:w="91"/><text x="91.9061%" y="79.50"></text></g><g><title>one_bill_row_challenge`DYLD-STUB$$free (181 samples, 0.11%)</title><rect x="91.7100%" y="69" width="0.1072%" height="15" fill="rgb(217,125,39)" fg:x="154778" fg:w="181"/><text x="91.9600%" y="79.50"></text></g><g><title>one_bill_row_challenge`DYLD-STUB$$malloc (28 samples, 0.02%)</title><rect x="91.8172%" y="69" width="0.0166%" height="15" fill="rgb(235,36,10)" fg:x="154959" fg:w="28"/><text x="92.0672%" y="79.50"></text></g><g><title>one_bill_row_challenge`DYLD-STUB$$memcpy (21 samples, 0.01%)</title><rect x="91.8338%" y="69" width="0.0124%" height="15" fill="rgb(251,123,47)" fg:x="154987" fg:w="21"/><text x="92.0838%" y="79.50"></text></g><g><title>one_bill_row_challenge`__rdl_alloc (41 samples, 0.02%)</title><rect x="91.8463%" y="69" width="0.0243%" height="15" fill="rgb(221,13,13)" fg:x="155008" fg:w="41"/><text x="92.0963%" y="79.50"></text></g><g><title>one_bill_row_challenge`__rdl_dealloc (19 samples, 0.01%)</title><rect x="91.8705%" y="69" width="0.0113%" height="15" fill="rgb(238,131,9)" fg:x="155049" fg:w="19"/><text x="92.1205%" y="79.50"></text></g><g><title>one_bill_row_challenge`core::num::dec2flt::_&lt;impl core::str::traits::FromStr for f64&gt;::from_str (124 samples, 0.07%)</title><rect x="91.8860%" y="69" width="0.0735%" height="15" fill="rgb(211,50,8)" fg:x="155075" fg:w="124"/><text x="92.1360%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (40 samples, 0.02%)</title><rect x="93.8721%" y="53" width="0.0237%" height="15" fill="rgb(245,182,24)" fg:x="158427" fg:w="40"/><text x="94.1221%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (513 samples, 0.30%)</title><rect x="93.8958%" y="53" width="0.3040%" height="15" fill="rgb(242,14,37)" fg:x="158467" fg:w="513"/><text x="94.1458%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1,080 samples, 0.64%)</title><rect x="94.1998%" y="53" width="0.6399%" height="15" fill="rgb(246,228,12)" fg:x="158980" fg:w="1080"/><text x="94.4498%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`malloc (28 samples, 0.02%)</title><rect x="94.8397%" y="53" width="0.0166%" height="15" fill="rgb(213,55,15)" fg:x="160060" fg:w="28"/><text x="95.0897%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (842 samples, 0.50%)</title><rect x="94.8563%" y="53" width="0.4989%" height="15" fill="rgb(209,9,3)" fg:x="160088" fg:w="842"/><text x="95.1063%" y="63.50"></text></g><g><title>libsystem_platform.dylib`__bzero (36 samples, 0.02%)</title><rect x="95.3552%" y="53" width="0.0213%" height="15" fill="rgb(230,59,30)" fg:x="160930" fg:w="36"/><text x="95.6052%" y="63.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (290 samples, 0.17%)</title><rect x="95.3765%" y="53" width="0.1718%" height="15" fill="rgb(209,121,21)" fg:x="160966" fg:w="290"/><text x="95.6265%" y="63.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (158 samples, 0.09%)</title><rect x="95.5484%" y="53" width="0.0936%" height="15" fill="rgb(220,109,13)" fg:x="161256" fg:w="158"/><text x="95.7984%" y="63.50"></text></g><g><title>one_bill_row_challenge`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4,542 samples, 2.69%)</title><rect x="95.6420%" y="53" width="2.6913%" height="15" fill="rgb(232,18,1)" fg:x="161414" fg:w="4542"/><text x="95.8920%" y="63.50">on..</text></g><g><title>one_bill_row_challenge`core::str::converts::from_utf8 (2,723 samples, 1.61%)</title><rect x="96.7198%" y="37" width="1.6134%" height="15" fill="rgb(215,41,42)" fg:x="163233" fg:w="2723"/><text x="96.9698%" y="47.50"></text></g><g><title>one_bill_row_challenge`DYLD-STUB$$malloc (125 samples, 0.07%)</title><rect x="98.3332%" y="53" width="0.0741%" height="15" fill="rgb(224,123,36)" fg:x="165956" fg:w="125"/><text x="98.5832%" y="63.50"></text></g><g><title>one_bill_row_challenge`DYLD-STUB$$memcmp (50 samples, 0.03%)</title><rect x="98.4073%" y="53" width="0.0296%" height="15" fill="rgb(240,125,3)" fg:x="166081" fg:w="50"/><text x="98.6573%" y="63.50"></text></g><g><title>one_bill_row_challenge`__rdl_alloc (142 samples, 0.08%)</title><rect x="98.4369%" y="53" width="0.0841%" height="15" fill="rgb(205,98,50)" fg:x="166131" fg:w="142"/><text x="98.6869%" y="63.50"></text></g><g><title>one_bill_row_challenge`core::num::dec2flt::_&lt;impl core::str::traits::FromStr for f64&gt;::from_str (735 samples, 0.44%)</title><rect x="98.5211%" y="53" width="0.4355%" height="15" fill="rgb(205,185,37)" fg:x="166273" fg:w="735"/><text x="98.7711%" y="63.50"></text></g><g><title>one_bill_row_challenge`core::num::dec2flt::parse::parse_number (457 samples, 0.27%)</title><rect x="98.6858%" y="37" width="0.2708%" height="15" fill="rgb(238,207,15)" fg:x="166551" fg:w="457"/><text x="98.9358%" y="47.50"></text></g><g><title>one_bill_row_challenge`core::num::dec2flt::parse::parse_number (48 samples, 0.03%)</title><rect x="98.9566%" y="53" width="0.0284%" height="15" fill="rgb(213,199,42)" fg:x="167008" fg:w="48"/><text x="99.2066%" y="63.50"></text></g><g><title>one_bill_row_challenge`core::str::converts::from_utf8 (97 samples, 0.06%)</title><rect x="98.9850%" y="53" width="0.0575%" height="15" fill="rgb(235,201,11)" fg:x="167056" fg:w="97"/><text x="99.2350%" y="63.50"></text></g><g><title>one_bill_row_challenge`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (12,648 samples, 7.49%)</title><rect x="91.9594%" y="69" width="7.4943%" height="15" fill="rgb(207,46,11)" fg:x="155199" fg:w="12648"/><text x="92.2094%" y="79.50">one_bill_r..</text></g><g><title>one_bill_row_challenge`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (694 samples, 0.41%)</title><rect x="99.0425%" y="53" width="0.4112%" height="15" fill="rgb(241,35,35)" fg:x="167153" fg:w="694"/><text x="99.2925%" y="63.50"></text></g><g><title>one_bill_row_challenge`core::str::_&lt;impl str&gt;::trim_matches (785 samples, 0.47%)</title><rect x="99.4537%" y="69" width="0.4651%" height="15" fill="rgb(243,32,47)" fg:x="167847" fg:w="785"/><text x="99.7037%" y="79.50"></text></g><g><title>one_bill_row_challenge`rayon::iter::plumbing::bridge_producer_consumer::helper (17,030 samples, 10.09%)</title><rect x="89.9069%" y="165" width="10.0907%" height="15" fill="rgb(247,202,23)" fg:x="151735" fg:w="17030"/><text x="90.1569%" y="175.50">one_bill_row_ch..</text></g><g><title>one_bill_row_challenge`rayon_core::join::join_context::_{{closure}} (17,030 samples, 10.09%)</title><rect x="89.9069%" y="149" width="10.0907%" height="15" fill="rgb(219,102,11)" fg:x="151735" fg:w="17030"/><text x="90.1569%" y="159.50">one_bill_row_ch..</text></g><g><title>one_bill_row_challenge`rayon::iter::plumbing::bridge_producer_consumer::helper (17,030 samples, 10.09%)</title><rect x="89.9069%" y="133" width="10.0907%" height="15" fill="rgb(243,110,44)" fg:x="151735" fg:w="17030"/><text x="90.1569%" y="143.50">one_bill_row_ch..</text></g><g><title>one_bill_row_challenge`rayon_core::join::join_context::_{{closure}} (17,030 samples, 10.09%)</title><rect x="89.9069%" y="117" width="10.0907%" height="15" fill="rgb(222,74,54)" fg:x="151735" fg:w="17030"/><text x="90.1569%" y="127.50">one_bill_row_ch..</text></g><g><title>one_bill_row_challenge`rayon::iter::plumbing::bridge_producer_consumer::helper (17,030 samples, 10.09%)</title><rect x="89.9069%" y="101" width="10.0907%" height="15" fill="rgb(216,99,12)" fg:x="151735" fg:w="17030"/><text x="90.1569%" y="111.50">one_bill_row_ch..</text></g><g><title>one_bill_row_challenge`rayon::iter::plumbing::Folder::consume_iter (17,030 samples, 10.09%)</title><rect x="89.9069%" y="85" width="10.0907%" height="15" fill="rgb(226,22,26)" fg:x="151735" fg:w="17030"/><text x="90.1569%" y="95.50">one_bill_row_ch..</text></g><g><title>one_bill_row_challenge`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (133 samples, 0.08%)</title><rect x="99.9188%" y="69" width="0.0788%" height="15" fill="rgb(217,163,10)" fg:x="168632" fg:w="133"/><text x="100.1688%" y="79.50"></text></g><g><title>one_bill_row_challenge`rayon_core::join::join_context::_{{closure}} (17,033 samples, 10.09%)</title><rect x="89.9069%" y="181" width="10.0925%" height="15" fill="rgb(213,25,53)" fg:x="151735" fg:w="17033"/><text x="90.1569%" y="191.50">one_bill_row_ch..</text></g><g><title>all (168,769 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(252,105,26)" fg:x="0" fg:w="168769"/><text x="0.2500%" y="335.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (168,726 samples, 99.97%)</title><rect x="0.0255%" y="309" width="99.9745%" height="15" fill="rgb(220,39,43)" fg:x="43" fg:w="168726"/><text x="0.2755%" y="319.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (168,726 samples, 99.97%)</title><rect x="0.0255%" y="293" width="99.9745%" height="15" fill="rgb(229,68,48)" fg:x="43" fg:w="168726"/><text x="0.2755%" y="303.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>one_bill_row_challenge`std::sys::pal::unix::thread::Thread::new::thread_start (168,726 samples, 99.97%)</title><rect x="0.0255%" y="277" width="99.9745%" height="15" fill="rgb(252,8,32)" fg:x="43" fg:w="168726"/><text x="0.2755%" y="287.50">one_bill_row_challenge`std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>one_bill_row_challenge`core::ops::function::FnOnce::call_once{{vtable.shim}} (168,726 samples, 99.97%)</title><rect x="0.0255%" y="261" width="99.9745%" height="15" fill="rgb(223,20,43)" fg:x="43" fg:w="168726"/><text x="0.2755%" y="271.50">one_bill_row_challenge`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>one_bill_row_challenge`std::sys_common::backtrace::__rust_begin_short_backtrace (168,726 samples, 99.97%)</title><rect x="0.0255%" y="245" width="99.9745%" height="15" fill="rgb(229,81,49)" fg:x="43" fg:w="168726"/><text x="0.2755%" y="255.50">one_bill_row_challenge`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>one_bill_row_challenge`rayon_core::registry::ThreadBuilder::run (168,726 samples, 99.97%)</title><rect x="0.0255%" y="229" width="99.9745%" height="15" fill="rgb(236,28,36)" fg:x="43" fg:w="168726"/><text x="0.2755%" y="239.50">one_bill_row_challenge`rayon_core::registry::ThreadBuilder::run</text></g><g><title>one_bill_row_challenge`rayon_core::registry::WorkerThread::wait_until_cold (168,726 samples, 99.97%)</title><rect x="0.0255%" y="213" width="99.9745%" height="15" fill="rgb(249,185,26)" fg:x="43" fg:w="168726"/><text x="0.2755%" y="223.50">one_bill_row_challenge`rayon_core::registry::WorkerThread::wait_until_cold</text></g><g><title>one_bill_row_challenge`&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (168,726 samples, 99.97%)</title><rect x="0.0255%" y="197" width="99.9745%" height="15" fill="rgb(249,174,33)" fg:x="43" fg:w="168726"/><text x="0.2755%" y="207.50">one_bill_row_challenge`&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute</text></g></svg></svg>